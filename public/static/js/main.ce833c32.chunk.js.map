{"version":3,"sources":["configurations/crud.service.ts","modules/users/services/user.service.ts","shared/admin-header/index.tsx","shared/admin-sidebar/index.tsx","shared/admin-layout/index.tsx","modules/admin-home-page/index.tsx","shared/services/validation.service.ts","shared/Input/index.js","modules/users/components/loginPage/index.tsx","shared/admin-table/index.tsx","shared/loading/index.tsx","modules/committees/services/committee.service.ts","modules/users/components/userForm/index.tsx","modules/users/components/usersListPage/index.tsx","modules/committees/components/committeeForm/index.tsx","modules/committees/components/committeesListPage/index.tsx","shared/services/uploadImage.service.ts","shared/image-input/index.tsx","modules/best-members/components/form/index.tsx","modules/best-members/services/best-member.service.ts","modules/best-members/components/page/index.tsx","modules/messages/services/message.service.ts","modules/messages/components/messagesListPage/index.tsx","modules/subscribtion/components/form/index.tsx","modules/subscribtion/services/subscriber.service.ts","modules/subscribtion/components/subscribersListPage/index.tsx","modules/categories/services/categories.service.ts","modules/categories/components/form/index.tsx","modules/categories/components/page/index.tsx","modules/blog/components/form/index.tsx","modules/blog/services/blog.service.ts","modules/blog/components/page/index.tsx","modules/events/services/event.service.ts","modules/events/components/eventForm/index.tsx","configurations/admin-routes.ts","modules/events/components/eventsListPage/index.tsx","App.tsx","index.tsx"],"names":["instance","axios","create","baseURL","defaults","headers","common","localStorage","getItem","CrudService","_http","url","parentUrl","this","initialize","bind","list","parentId","reqUrl","get","records","data","id","record","item","post","put","delete","UserService","login","logout","cred","response","setItem","JSON","stringify","user","token","removeItem","AdminHeader","props","_userService","logoutUser","then","window","location","href","className","style","marginLeft","isVisible","onClick","toggleSidebar","size","icon","faTimes","faBars","faSignOutAlt","Component","AdminSidebar","renderAdminRoutes","type","parse","adminRoutes","map","adRoute","index","label","adminOnly","key","exact","to","path","left","AdminLayout","state","isSidebarVisible","setState","children","AdminHome","isUserLoggedIn","history","push","isEmail","value","test","isEmpty","length","FormInput","validationMessage","inputTypes","numericTypes","textfulTypes","isNumericType","includes","isTextFulType","isRequired","required","errorPosition","customMessage","role","defaultMessage","validationMessages","errorMessage","validateEmpty","field","validateEmail","matchFieldLength","matchMinValue","min","matchMaxValue","max","matchMinLength","minLength","matchMaxLength","maxLength","hasExceededMaxDate","dateProvided","maxDate","Date","getTime","matchMaxDate","hasExceededMinDate","minDate","matchMinDate","matchTextPattern","regPattern","pattern","RegExp","validateField","e","input","target","validationCollectedRules","rule","onInput","isAcceptableProp","prop","getAcceptedProps","obj","addClass","classList","add","options","htmlFor","onChange","disabled","option","idx","LoginPage","username","password","isLoading","success","error","handleChange","currentTarget","name","handleSubmit","a","preventDefault","setTimeout","msg","onSubmit","placeholder","show","title","timeout","onConfirm","warning","AdminTable","renderTableHeaders","config","tableHeaders","header","scope","toUpperCase","renderTableBody","tableBody","keyHeader","params","toUTCString","slice","actions","renderViewBtn","renderEditBtn","renderDeleteBtn","triggerEditEvent","data-toggle","data-target","_id","faEdit","triggerViewEvent","faEye","deleteRow","faTrash","Loading","CommitteeService","UserForm","committee","committees","isImageUploading","errorAlert","_committeeService","setImageUpload","status","imageUrl","image","formatDate","currentDateTime","getFullYear","getMonth","getDate","resetObj","generateCode","randomNumber","Math","floor","random","code","String","generateArrayOfCommitteesNames","committeesArray","committeesNames","itemToBeEdited","date","isModalOpened","closeModal","isSubmitting","open","onClose","center","styles","modal","animation","UsersListPage","tableConfig","users","successAlert","userToBeEdited","isCreateModalOpened","idOfItemToBeDeleted","createUser","unshift","catch","err","editUser","submit","update","updateStateWithNewUser","objectToUpdateIndex","findIndex","splice","removeUser","filter","faPlus","Object","keys","showCancel","confirmBtnText","confirmBtnBsStyle","onCancel","focusCancelBtn","CommitteeForm","CommitteesListPage","committeeToBeEdited","createCommittee","editCommittee","updateStateWithNewCommittee","removeCommittee","uploadImage","fd","FormData","append","process","ImageInput","isImageUploaded","handleImageInputChange","files","res","secure_url","renderImageUpload","accept","renderImagePreview","src","imgUrl","width","alt","removeImage","prevProps","BestMemberForm","bestMember","BestMembersService","BestMembersListPage","bestMembers","bestMemberToBeEdited","_bestMembersService","createBestMember","editBestMember","updateStateWithNewBestMember","removeBestMember","MessageService","MessagesListPage","messages","itemToBeViewed","_messageService","viewMessage","message","closeViewModal","removeMessage","subject","EmailForm","email","body","rows","SubscriberService","SubscribersListPage","subscribers","_subscriberService","sendEmailToSubscribers","sendEmail","removeSubscriber","CategoriesService","category","_categoryService","CategoriesListPage","categories","categoryToBeEdited","_categoriesService","createCategory","editCategory","updateStateWithNewCategory","removeCategory","ArticleForm","article","cover","metaDescription","handleCreate","textField","valueField","allowCreate","onCreate","readonly","onBlur","newContent","BlogService","ArticlesListPage","articles","articleToBeEdited","_blogService","createArticle","editArticle","updateStateWithNewArticle","removeArticle","EventService","Moment","locale","momentLocalizer","EventForm","event","description","startDate","endDate","images","formLink","_eventService","uploadGalleryImage","dateString","convertDateStringIntoDateObject","toString","component","events","eventToBeEdited","createEvent","editEvent","updateStateWithNewEvent","Event","removeEvent","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce833c32.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"/api\",\n});\n\ninstance.defaults.headers.common[\"x-access-token\"] = localStorage.getItem(\n  \"token\"\n);\n\nexport default class CrudService {\n  _http: typeof axios;\n  url: string;\n  parentUrl?: string;\n\n  constructor() {\n    this._http = instance as typeof axios;\n\n    this.initialize = this.initialize.bind(this);\n    this.list = this.list.bind(this);\n  }\n\n  initialize(url: string, parentUrl = \"\") {\n    this.url = url;\n    this.parentUrl = parentUrl;\n  }\n\n  async list(parentId?: string) {\n    let reqUrl =\n      this.parentUrl || parentId\n        ? `${this.parentUrl + parentId}${this.url}/list`\n        : `${this.url}/list`;\n\n    let { data: records } = await this._http.get(reqUrl);\n    return records;\n  }\n\n  async getById(id: string, parentId?: string) {\n    let reqUrl =\n      this.parentUrl || parentId\n        ? `${this.parentUrl + parentId}${this.url}/${id}`\n        : `${this.url}/${id}`;\n\n    let { data: record } = await this._http.get(reqUrl);\n    return record;\n  }\n\n  async create(item: any, parentId?: string) {\n    let reqUrl =\n      this.parentUrl || parentId\n        ? `${this.parentUrl + parentId}${this.url}/new`\n        : `${this.url}/new`;\n\n    let { data: record } = await this._http.post(reqUrl, item);\n    return record;\n  }\n\n  async update(id: string, item: any) {\n    let reqUrl = this.parentUrl\n      ? `${this.parentUrl}${this.url}/${id}`\n      : `${this.url}/${id}`;\n\n    let { data: record } = await this._http.put(reqUrl, item);\n    return record;\n  }\n\n  async delete(id: string, parentId?: string) {\n    let reqUrl =\n      this.parentUrl || parentId\n        ? `${this.parentUrl + parentId}${this.url}/${id}`\n        : `${this.url}/${id}`;\n\n    let { data } = await this._http.delete(reqUrl);\n    return data;\n  }\n}\n","import CrudService from \"configurations/crud.service\";\n\nexport default class UserService extends CrudService {\n  constructor() {\n    super();\n    this.initialize(\"/users\");\n\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  async login(cred: { username: string; password: string }) {\n    let response = await this._http.post(`${this.url}/login`, cred);\n\n    localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n    localStorage.setItem(\"token\", response.data.token);\n\n    return response;\n  }\n\n  async logout() {\n    let response = await this._http.get(`${this.url}/logout`);\n\n    localStorage.setItem(\"user\", null);\n    localStorage.removeItem(\"token\");\n\n    return response;\n  }\n\n  isUserLoggedIn() {\n    if (localStorage.getItem(\"token\")) return true;\n    else return false;\n  }\n\n  async getById(id: string) {\n    let { data: record } = await this._http.get(`${this.url}/me/${id}`);\n    return record;\n  }\n}\n","import React, { Component } from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSignOutAlt,\n  faBars,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport UserService from \"modules/users/services/user.service\";\n\nimport \"./style.css\";\n\ninterface Prop {\n  isVisible: boolean;\n  toggleSidebar(event: React.MouseEvent<HTMLButtonElement>): void;\n}                                             \n\nexport default class AdminHeader extends Component<Prop> {\n  public _userService: UserService;\n  constructor(props: Prop) {\n    super(props);\n    this._userService = new UserService();\n  }\n\n  logoutUser: (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => void = () => {\n    this._userService.logout().then(() => {\n      window.location.href = \"/login\";\n    });\n  };\n\n  render() {\n    return (\n      <nav className=\"navbar admin-header navbar-expand-lg\">\n        <button\n          className=\"btn text-muted nav-item d-md-none\"\n          style={{ marginLeft: this.props.isVisible ? \"245px\" : \"0\" }}\n          onClick={this.props.toggleSidebar}\n        >\n          <FontAwesomeIcon\n            size=\"lg\"\n            icon={this.props.isVisible ? faTimes : faBars}\n          />\n        </button>\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item\">\n            <button\n              className=\"btn btn-link text-muted\"\n              onClick={this.logoutUser}\n            >\n              Logout <FontAwesomeIcon icon={faSignOutAlt} />\n            </button>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./style.css\";\n\nimport { NavLink } from \"react-router-dom\";\n\nimport { adminRoutes } from \"configurations/admin-routes\";\nimport { RouteStructure } from \"configurations/interfaces/route.interface\";\n\ninterface Prop {\n  isVisible: boolean;\n}\n\nexport default class AdminSidebar extends Component<Prop> {\n  renderAdminRoutes = () => {\n    let { type } = localStorage.getItem(\"user\")\n      ? JSON.parse(localStorage.getItem(\"user\"))\n      : \"\";\n    return adminRoutes.map((adRoute: RouteStructure, index: number) => {\n      if (adRoute.label) {\n        if (type === \"Board\" && !adRoute.adminOnly) {\n          return (\n            <li key={index} className=\"sidebarItem\">\n              <NavLink exact to={adRoute.path}>\n                {adRoute.label}\n              </NavLink>\n            </li>\n          );\n        } else if (type === \"Admin\") {\n          return (\n            <li key={index} className=\"sidebarItem\">\n              <NavLink exact to={adRoute.path}>\n                {adRoute.label}\n              </NavLink>\n            </li>\n          );\n        } else return \"\";\n      } else return \"\";\n    });\n  };\n\n  render() {\n    return (\n      <aside\n        className=\"adminSidebar text-center\"\n        style={{ left: !this.props.isVisible ? \"-245px\" : \"0\" }}\n      >\n        <h1> Admin Dashboard </h1>\n        <ul className=\"list-unstyled mt-2\">{this.renderAdminRoutes()}</ul>\n      </aside>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport AdminHeader from \"../admin-header\";\nimport AdminSidebar from \"../admin-sidebar\";\n\nimport \"./style.css\";\n\ninterface State {\n  isSidebarVisible: boolean;\n}\n\nexport default class AdminLayout extends Component<{ children: React.ReactNode }, State> {\n  state = {\n    isSidebarVisible: true,\n  };\n\n  toggleSidebar: (event: React.MouseEvent<HTMLButtonElement>) => void = () => {\n    this.setState({ isSidebarVisible: !this.state.isSidebarVisible });\n  };\n\n  render() {\n    return (\n      <>\n        <AdminHeader\n          toggleSidebar={this.toggleSidebar}\n          isVisible={this.state.isSidebarVisible}\n        />\n        <main className=\"admin-main\">{this.props.children}</main>\n        <AdminSidebar\n          isVisible={this.state.isSidebarVisible}\n        />\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./style.css\";\n\nimport AdminLayout from \"shared/admin-layout\";\nimport UserService from \"modules/users/services/user.service\";\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\nexport default class AdminHome extends Component<Prop> {\n  public _userService: UserService;\n  constructor(props: Prop) {\n    super(props);\n    this._userService = new UserService();\n  }\n\n  async componentDidMount() {\n    if (!this._userService.isUserLoggedIn()) this.props.history.push(\"/login\");\n  }\n\n  render() {\n    return (\n      <AdminLayout>\n        <div className=\"admin-home d-flex justify-content-center align-items-center\">\n          <header className=\"admin-home__header text-center\">\n            <h2>Welcome to Dashboard</h2>\n          </header>\n        </div>\n      </AdminLayout>\n    );\n  }\n}\n","export const isEmail = (value: string) =>\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n    value\n  );\n\nexport const isEmpty = (value: string) => value.length === 0;\n","import React, { Component } from \"react\";\nimport { isEmail, isEmpty } from \"../services/validation.service\";\n\nimport \"./style.css\";\n\nexport default class FormInput extends Component {\n  state = {\n    validationMessage: \"\",\n  };\n\n  // get all the input types to add attributes dynamically to the input\n  inputTypes = {\n    numericTypes: [\"number\"],\n    textfulTypes: [\"text\", \"email\", \"password\", \"tel\"],\n  };\n\n  /**\n   * Check if the type provided is a numeric number\n   * it makes the input component accept min & max attributes\n   */\n  isNumericType = () => {\n    return this.inputTypes.numericTypes.includes(this.props.type);\n  };\n\n  /**\n   * Check if the type provided is a textful number\n   * it makes the input component accept minLength & maxLength attributes\n   */\n  isTextFulType = () => {\n    return this.inputTypes.textfulTypes.includes(this.props.type);\n  };\n\n  // check if the field is required\n  isRequired = () => {\n    return this.props.required;\n  };\n\n  // make the error message's position according to the errorPosition prop provided\n  errorPosition = () => {\n    return this.props.errorPosition === \"top\" ? \"order-top\" : \"order-bottom\";\n  };\n\n  /**\n   * View the custom message provided by the user or view a custom message\n   *\n   * @param {string} role\n   * @param {string} defaultMessage\n   */\n  customMessage = (role, defaultMessage) => {\n    let { validationMessages } = this.props;\n    return (validationMessages && validationMessages[role]) || defaultMessage;\n  };\n\n  errorMessage = null;\n\n  validateEmpty = (field) => {\n    // validate required input\n    // check if the input is not empty\n    if (this.isRequired() && isEmpty(field.value)) {\n      // he didn't access this body\n      this.errorMessage = this.customMessage(\n        \"empty\",\n        \"This field is Required!\"\n      );\n    }\n  };\n\n  validateEmail = (field) => {\n    // check if the input value a valid email address\n    // validate the email when the validation.errorMessage is null\n    if (\n      this.props.type === \"email\" &&\n      this.state.validationMessage === null &&\n      isEmpty(field.value) &&\n      !isEmail(field.value)\n    ) {\n      this.errorMessage = this.customMessage(\"email\", \"Invalid Email Address\");\n    }\n  };\n\n  matchFieldLength = (field) => {\n    let { length } = this.props;\n\n    // check if the value equals the length specified\n    if (!isEmpty(field.value) && length && field.value.length !== length) {\n      this.errorMessage = this.customMessage(\n        \"lengthMessage\",\n        `This field should be ${length} in length`\n      );\n    }\n  };\n\n  matchMinValue = (field) => {\n    let { min } = this.props;\n    if (this.isNumericType() && min && field.value < min) {\n      this.errorMessage = this.customMessage(\n        \"minValueMessage\",\n        `The minimum value accepted is ${min}`\n      );\n    }\n  };\n\n  matchMaxValue = (field) => {\n    let { max } = this.props;\n    if (this.isNumericType() && max && field.value > max) {\n      this.errorMessage = this.customMessage(\n        \"maxValueMessage\",\n        `The maximum value accepted is ${max}`\n      );\n    }\n  };\n\n  matchMinLength = (field) => {\n    let { minLength } = this.props;\n    if (this.isTextFulType() && minLength && field.value.length < minLength) {\n      this.errorMessage = this.customMessage(\n        \"minLengthMessage\",\n        `The field should be at minimum ${minLength} characters `\n      );\n    }\n  };\n\n  matchMaxLength = (field) => {\n    let { maxLength } = this.props;\n    if (this.isTextFulType() && !!maxLength && field.value.length > maxLength) {\n      this.errorMessage = this.customMessage(\n        \"maxLengthMessage\",\n        `The field should be maximum ${maxLength} characters `\n      );\n    }\n  };\n\n  hasExceededMaxDate = (dateProvided, maxDate) => {\n    return new Date(dateProvided).getTime() > new Date(maxDate).getTime();\n  };\n\n  matchMaxDate = (field) => {\n    let { maxDate } = this.props;\n\n    if (\n      this.isNumericType() &&\n      !!maxDate &&\n      this.hasExceededMaxDate(field.value, maxDate)\n    ) {\n      this.errorMessage = this.customMessage(\n        \"maxDateMessage\",\n        `The Date should be maximum ${maxDate}`\n      );\n    }\n  };\n\n  hasExceededMinDate = (dateProvided, minDate) => {\n    return new Date(dateProvided).getTime() < new Date(minDate).getTime();\n  };\n\n  matchMinDate = (field) => {\n    let { minDate } = this.props;\n\n    if (\n      this.isNumericType() &&\n      !!minDate &&\n      this.hasExceededMinDate(field.value, minDate)\n    ) {\n      this.errorMessage = this.customMessage(\n        \"maxDateMessage\",\n        `The Date should be minimum ${minDate}`\n      );\n    }\n  };\n\n  matchTextPattern = (field) => {\n    let { type, regPattern } = this.props,\n      pattern = new RegExp(`${regPattern}`, \"g\");\n\n    if (type === \"text\" && regPattern && !pattern.test(field.value)) {\n      this.errorMessage = this.customMessage(\n        \"matchPattern\",\n        `The string should match pattern provided`\n      );\n    }\n  };\n\n  // validate the field according to its type\n  validateField = (e) => {\n    let input = e.target,\n      validationCollectedRules = [\n        this.validateEmpty,\n        this.validateEmail,\n        this.matchFieldLength,\n        this.matchMinValue,\n        this.matchMinValue,\n        this.matchMaxLength,\n        this.matchMinLength,\n        this.matchMaxDate,\n        this.matchMinDate,\n        this.matchTextPattern,\n      ];\n\n    this.errorMessage = null;\n\n    // validate according to the rules provided\n    for (let rule of validationCollectedRules) {\n      rule(input);\n      if (this.errorMessage) break;\n    }\n\n    this.setState({\n      validationMessage: this.errorMessage,\n    });\n\n    if (this.props.onInput) {\n      this.props.onInput(e);\n    }\n  };\n\n  isAcceptableProp = (prop) => {\n    let acceptableProps = [\n      \"type\",\n      \"required\",\n      \"minLength\",\n      \"maxLength\",\n      \"length\",\n      \"min\",\n      \"validationMessages\",\n      \"errorPosition\",\n      \"minDate\",\n      \"maxDate\",\n      \"regPattern\",\n      \"options\",\n    ];\n    return typeof prop !== \"object\" && !acceptableProps.includes(prop);\n  };\n\n  getAcceptedProps = () => {\n    let obj = {};\n\n    for (let prop in this.props) {\n      if (\n        typeof this.props[prop] === \"function\" ||\n        this.isAcceptableProp(prop)\n      ) {\n        obj[prop] = this.props[prop];\n      }\n    }\n\n    return obj;\n  };\n\n  addClass = (e) => {\n    if (this.props.className) {\n      e.target.classList.add(this.props.className);\n    }\n  };\n\n  render() {\n    let { type, options, className, label, id, value } = this.props;\n\n    return (\n      <section className=\"input-wrapper\">\n        {this.state.validationMessage !== null && (\n          <span className={`error ${this.errorPosition()} text-red`}>\n            {this.state.validationMessage}\n          </span>\n        )}\n\n        {label && <label htmlFor={id}> {label} {this.isRequired() && <span className=\"error\">*</span>} </label>}\n\n        {type === \"select\" ? (\n          <select onChange={this.validateField} {...this.getAcceptedProps()}>\n            <option value=\"\" disabled>\n              Choose {label}\n            </option>\n            {options &&\n              options.map((option, idx) => (\n                <option value={option} key={idx}>\n                  {\" \"}\n                  {option}{\" \"}\n                </option>\n              ))}\n          </select>\n        ) : type === \"textarea\" ? (\n          <textarea\n            {...this.getAcceptedProps()}\n            className={`form-control ${className}`}\n            onInput={this.validateField}\n          ></textarea>\n        ) : (\n          <input\n            {...this.getAcceptedProps()}\n            type={\n              type === \"int\" || type === \"float\" || type === \"number\"\n                ? \"number\"\n                : type\n            }\n            className={`form-control ${className}`}\n            onInput={this.validateField}\n            value={value || \"\"}\n          />\n        )}\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport UserService from \"modules/users/services/user.service\";\nimport FormInput from \"shared/Input\";\n\nimport SweetAlert from \"react-bootstrap-sweetalert\";\n\nimport \"./style.css\";\n\ninterface State {\n  user: {\n    username: string;\n    password: string;\n  };\n  isLoading: boolean;\n  success: string;\n  error: string;\n}\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\nexport default class LoginPage extends Component<Prop, State> {\n  state = {\n    user: {\n      username: \"\",\n      password: \"\",\n    },\n    isLoading: false,\n    success: \"\",\n    error: \"\",\n  };\n\n  public _userService: UserService;\n  constructor(props: Prop) {\n    super(props);\n    this._userService = new UserService();\n  }\n\n  handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    let { name, value } = e.currentTarget;\n\n    let { user } = this.state;\n\n    this.setState({\n      user: {\n        ...user,\n        [name]: value,\n      } as any,\n    });\n  };\n\n  handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let { user } = this.state;\n\n    this.setState({\n      isLoading: true,\n    });\n\n    let response;\n    try {\n      response = await this._userService.login(user);\n      let { type } = response.data.user;\n\n      if (type === \"Member\") {\n        this.setState({\n          isLoading: false,\n          success: null,\n          error: \"You shouldn't be here !\",\n        });\n      } else if (type === \"Admin\") {\n        this.setState({\n          isLoading: false,\n          success: \"Logged in successfully\",\n          error: \"\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/\";\n        }, 2000);\n      } else if (type === \"Marketer\") {\n        this.setState({\n          isLoading: false,\n          success: \"Logged in successfully\",\n          error: \"\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/blog\";\n        }, 2000);\n      }\n    } catch (err) {\n      this.setState({\n        isLoading: false,\n        success: null,\n        error: err.response.data.msg,\n      });\n    }\n  };\n\n  render() {\n    let { isLoading, success, error, user } = this.state;\n    return (\n      <section className=\"login-page\">\n        <div className=\"login-form-box\">\n          <h1 className=\"text-center h3 mb-5\"> Login to the dashboard </h1>\n          <form className=\"login-form\" onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n              <FormInput\n                type=\"text\"\n                required={true}\n                placeholder=\"Username\"\n                label=\"Username\"\n                id=\"username\"\n                name=\"username\"\n                errorPosition=\"bottom\"\n                value={user.username}\n                onChange={this.handleChange}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <FormInput\n                type=\"password\"\n                className=\"form-control\"\n                required={true}\n                label=\"Password\"\n                id=\"password\"\n                name=\"password\"\n                errorPosition=\"bottom\"\n                value={user.password}\n                onChange={this.handleChange}\n              />\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary btn-block\">\n              {isLoading ? \"Logging you in ...\" : \"LOGIN\"}\n            </button>\n\n            {success ? (\n              <SweetAlert\n                show={!!success}\n                success\n                title={success || \" \"}\n                timeout={2000}\n                onConfirm={() => this.setState({ success: null })}\n              />\n            ) : error ? (\n              <SweetAlert\n                show={!!error}\n                warning\n                title=\"An error occurred\"\n                timeout={2000}\n                onConfirm={() => this.setState({ error: null })}\n              >\n                {error}\n              </SweetAlert>\n            ) : (\n              \"\"\n            )}\n          </form>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faEdit, faEye } from \"@fortawesome/free-solid-svg-icons\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./style.css\";\n\ninterface Prop {\n  config: {\n    tableHeaders: any[];\n    className: string;\n    actions: string[];\n    filters?: ((filter: string) => void)[];\n  };\n  tableBody: any[];\n  triggerEditEvent?: (item: any, submit: boolean, id?: string) => void;\n  triggerViewEvent?: (item: any) => void;\n  deleteRow: (id: string, isToBeSubmitted: boolean) => void;\n}\n\nexport default class AdminTable extends Component<Prop> {\n  renderTableHeaders = () => {\n    let { tableHeaders } = this.props.config;\n\n    return tableHeaders.map((header: any, index) => {\n      if (typeof header === \"object\") {\n        return (\n          <th key={index} scope=\"col\">\n            {header.name.toUpperCase()}\n          </th>\n        );\n      } else {\n        return (\n          <th key={index} scope=\"col\">\n            {header.toUpperCase()}\n          </th>\n        );\n      }\n    });\n  };\n\n  renderTableBody = () => {\n    let { tableBody, config } = this.props;\n    return tableBody.map((item, index) => (\n      <tr key={index}>\n        {this.props.config.tableHeaders.map((keyHeader: any) => {\n          if (typeof keyHeader === \"object\") {\n            return (\n              <td key={keyHeader.name}>\n                <Link\n                  to={`${keyHeader.href}/${\n                    keyHeader.params ? item[keyHeader.params] : \"\"\n                  }`}\n                >\n                  {item[keyHeader.name]}\n                </Link>\n              </td>\n            );\n          } else if (keyHeader === \"createdAt\" || keyHeader === \"created_at\") {\n            return (\n              <td key={keyHeader}>\n                {\" \"}\n                {new Date(item[keyHeader]).toUTCString().slice(5, 16)}{\" \"}\n              </td>\n            );\n          } else {\n            return <td key={keyHeader}> {item[keyHeader]} </td>;\n          }\n        })}\n        <td>\n          {config.actions.includes(\"view\") && this.renderViewBtn(item)}\n          {config.actions.includes(\"edit\") && this.renderEditBtn(item)}\n          {config.actions.includes(\"delete\") && this.renderDeleteBtn(item)}\n        </td>\n      </tr>\n    ));\n  };\n\n  renderEditBtn = (item: any) => {\n    let { triggerEditEvent } = this.props;\n\n    return (\n      <button\n        className=\"btn btn-secondary mr-2\"\n        data-toggle=\"modal\"\n        data-target=\"#editModal\"\n        title=\"Edit Item\"\n        onClick={() => triggerEditEvent(item, false, item._id)}\n      >\n        <FontAwesomeIcon icon={faEdit} />\n      </button>\n    );\n  };\n\n  renderViewBtn = (item: any) => {\n    let { triggerViewEvent } = this.props;\n\n    return (\n      <button\n        className=\"btn btn-secondary mr-2\"\n        data-toggle=\"modal\"\n        data-target=\"#viewModal\"\n        title=\"View Item\"\n        onClick={() => triggerViewEvent(item)}\n      >\n        <FontAwesomeIcon icon={faEye} />\n      </button>\n    );\n  };\n\n  renderDeleteBtn = (item: any) => {\n    let { deleteRow } = this.props;\n\n    return (\n      <button\n        className=\"btn btn-danger\"\n        onClick={() => deleteRow(item._id, false)}\n      >\n        <FontAwesomeIcon icon={faTrash} />\n      </button>\n    );\n  };\n\n  render() {\n    let { className } = this.props.config;\n    return (\n      <>\n        <table className={`${className} table`}>\n          <thead>\n            <tr>\n              {this.renderTableHeaders()}\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>{this.renderTableBody()}</tbody>\n        </table>\n      </>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function Loading() {\n  return (\n    <>\n      <p>loading ... </p>\n    </>\n  );\n}\n","import CrudService from \"configurations/crud.service\";\n\nexport default class CommitteeService extends CrudService {\n  constructor() {\n    super();\n    this.initialize(\"/committees\");\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"react-responsive-modal/styles.css\";\nimport { Modal } from \"react-responsive-modal\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\n\nimport { User } from \"configurations/interfaces/user.interface\";\nimport { Committee } from \"configurations/interfaces/committee.interface\";\nimport CommitteeService from \"modules/committees/services/committee.service\";\n\nimport Loading from \"shared/loading\";\nimport FormInput from \"shared/Input\";\nimport { isEmpty } from \"shared/services/validation.service\";\n\ninterface Prop {\n  isModalOpened: boolean;\n  onSubmit: (item: any, submit: boolean, id?: string) => Promise<void>;\n  closeModal: () => void;\n  itemToBeEdited?: any;\n  isSubmitting?: boolean;\n}\n\ninterface State {\n  user: User;\n  isLoading: boolean;\n  isImageUploading: boolean;\n  committees: string[];\n  errorAlert: string;\n}\n\nexport default class UserForm extends Component<Prop, State> {\n  state = {\n    user: {\n      username: \"\",\n      password: \"\",\n      type: \"\",\n      committee: \"\",\n    },\n    committees: [] as string[],\n    isLoading: false,\n    isImageUploading: false,\n    errorAlert: \"\",\n  };\n\n  _committeeService: CommitteeService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._committeeService = new CommitteeService();\n  }\n\n  componentDidMount() {\n    let { itemToBeEdited } = this.props;\n\n    if (itemToBeEdited) {\n      itemToBeEdited.date = this.formatDate();\n      this.setState({ user: itemToBeEdited });\n    }\n\n    this._committeeService.list().then((response) => {\n      this.setState({\n        committees: this.generateArrayOfCommitteesNames(response),\n      });\n    });\n  }\n\n  setImageUpload = (status: boolean, imageUrl?: string) => {\n    this.setState({ isImageUploading: status });\n    if (imageUrl)\n      this.setState({\n        user: { ...this.state.user, image: imageUrl } as any,\n      });\n  };\n\n  formatDate = () => {\n    let currentDateTime = new Date();\n    let formattedDate =\n      currentDateTime.getFullYear() +\n      \"-\" +\n      (currentDateTime.getMonth() + 1) +\n      \"-\" +\n      currentDateTime.getDate();\n\n    return formattedDate;\n  };\n\n  handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    let { name, value } = e.currentTarget;\n\n    this.setState({\n      user: {\n        ...this.state.user,\n        [name]: value,\n      } as any,\n    });\n  };\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let { user } = this.state;\n\n    if (\n      isEmpty(user.committee) ||\n      isEmpty(user.password) ||\n      isEmpty(user.type) ||\n      isEmpty(user.username)\n    ) {\n      this.setState({\n        errorAlert: \"Please make sure to fill all the required fields !\",\n      });\n    } else {\n      this.props.onSubmit(this.state.user, true).then(() => {\n        this.resetObj(user);\n        this.setState({ user: user });\n      });\n    }\n  };\n\n  resetObj(obj: any) {\n    for (let prop in obj) {\n      obj[prop] = \"\";\n    }\n  }\n\n  generateCode = (): void => {\n    let randomNumber = Math.floor(100000000 + Math.random() * 900000000);\n\n    this.setState({\n      user: {\n        ...this.state.user,\n        code: String(randomNumber),\n      } as any,\n    });\n  };\n\n  generateArrayOfCommitteesNames = (committeesArray: Committee[]): string[] => {\n    let committeesNames: string[] = [];\n    committeesArray.map(({ name }) => committeesNames.push(name));\n\n    return committeesNames;\n  };\n\n  render() {\n    let {\n      isModalOpened,\n      itemToBeEdited,\n      closeModal,\n      isSubmitting,\n    } = this.props;\n    let {\n      user,\n      isLoading,\n      isImageUploading,\n      committees,\n      errorAlert,\n    } = this.state;\n\n    return (\n      <Modal\n        open={isModalOpened}\n        onClose={() => closeModal()}\n        center\n        styles={{\n          modal: {\n            animation: `${\n              isModalOpened ? \"customEnterAnimation\" : \"customLeaveAnimation\"\n            } 500ms`,\n          },\n        }}\n      >\n        {isLoading ? (\n          <Loading />\n        ) : (\n          <>\n            <h3 className=\"mb-3\"> Member </h3>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"form-group col-md-6\">\n                  <FormInput\n                    type=\"text\"\n                    required={true}\n                    placeholder=\"Username\"\n                    label=\"Name\"\n                    id=\"name\"\n                    name=\"name\"\n                    errorPosition=\"bottom\"\n                    value={user.username}\n                    onChange={this.handleChange}\n                  />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <FormInput\n                    type=\"select\"\n                    className=\"form-control\"\n                    options={[\"Admin\", \"Marketer\"]}\n                    required={true}\n                    label=\"Type\"\n                    id=\"type\"\n                    name=\"type\"\n                    errorPosition=\"bottom\"\n                    value={user.type}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"form-group col-md-6\">\n                  <FormInput\n                    type=\"select\"\n                    className=\"form-control\"\n                    options={\n                      committees && committees.length > 0 ? committees : []\n                    }\n                    required={true}\n                    label=\"Committee\"\n                    id=\"committee\"\n                    name=\"committee\"\n                    errorPosition=\"bottom\"\n                    value={user.committee}\n                    onChange={this.handleChange}\n                  />\n                </div>\n\n                <div className=\"form-group col-md-6\">\n                  <FormInput\n                    type=\"password\"\n                    className=\"form-control\"\n                    required={true}\n                    label=\"Password\"\n                    id=\"password\"\n                    name=\"password\"\n                    errorPosition=\"bottom\"\n                    value={user.password}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting || isImageUploading}\n              >\n                {isImageUploading\n                  ? \"Uploading...\"\n                  : isSubmitting\n                  ? \"Loading ...\"\n                  : itemToBeEdited\n                  ? \"Save\"\n                  : \"Create\"}\n              </button>\n            </form>\n          </>\n        )}\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport AdminLayout from \"shared/admin-layout\";\nimport AdminTable from \"shared/admin-table\";\nimport Loading from \"shared/loading\";\nimport UserForm from \"../userForm\";\n\nimport UserService from \"modules/users/services/user.service\";\nimport { User } from \"configurations/interfaces/user.interface\";\n\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\ninterface State {\n  users: User[];\n  userToBeEdited?: User | null;\n  successAlert: string;\n  errorAlert: string;\n  isLoading: boolean;\n  isCreateModalOpened: boolean;\n  isSubmitting: boolean;\n  idOfItemToBeDeleted: string;\n}\n\nexport default class UsersListPage extends Component<Prop, State> {\n  tableConfig = {\n    tableHeaders: [\n      \"username\",\n      \"type\",\n      \"committee\",\n    ],\n    className: \"table-striped\",\n    actions: [\"edit\", \"delete\"],\n  };\n\n  state = {\n    users: [] as User[],\n    successAlert: \"\",\n    errorAlert: \"\",\n    userToBeEdited: {} as User,\n    isLoading: false,\n    isCreateModalOpened: false,\n    isSubmitting: false,\n    idOfItemToBeDeleted: \"\",\n  };\n\n  public _userService: UserService;\n  constructor(props: Prop) {\n    super(props);\n    this._userService = new UserService();\n  }\n\n  async componentDidMount() {\n    if (!this._userService.isUserLoggedIn())\n      return this.props.history.push(\"/login\");\n\n    this.setState({ isLoading: true });\n    try {\n      let users = await this._userService.list();\n\n      this.setState({ users, isLoading: false });\n    } catch {\n      this.setState({ errorAlert: \"Error retrieving items\", isLoading: false });\n    }\n  }\n\n  createUser = (user: User) => {\n    let { users } = this.state;\n\n    this.setState({\n      isSubmitting: true,\n    });\n\n    return this._userService\n      .create(user)\n      .then((response) => {\n        users.unshift(response as never);\n\n        this.setState({\n          users,\n          successAlert: \"User added successfully\",\n          errorAlert: \"\",\n          isCreateModalOpened: false,\n          isSubmitting: false,\n        });\n      })\n      .catch((err) => {\n        this.setState({\n          errorAlert: err.response.data.msg,\n          successAlert: \"\",\n          isSubmitting: false,\n        });\n      });\n  };\n\n  editUser = (\n    user: User,\n    submit: boolean,\n    id = this.state.userToBeEdited._id\n  ) => {\n    if (submit) {\n      this.setState({\n        isSubmitting: true,\n      });\n      return this._userService\n        .update(id, user)\n        .then((response) => {\n          this.updateStateWithNewUser(response);\n          this.setState({\n            isSubmitting: false,\n            successAlert: \"User updated successfully\",\n            errorAlert: \"\",\n            userToBeEdited: {} as User,\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            errorAlert: err.response.data.msg,\n          });\n        });\n    } else {\n      this.setState({\n        isSubmitting: false,\n        userToBeEdited: user,\n      });\n    }\n  };\n\n  updateStateWithNewUser = (user: User) => {\n    let { users } = this.state;\n    let objectToUpdateIndex: number = users.findIndex(\n      (item: User) => item._id === user._id\n    );\n\n    users.splice(objectToUpdateIndex, 1, user as never);\n\n    this.setState({ users });\n  };\n\n  removeUser = (id: string, submit?: boolean) => {\n    let { users } = this.state;\n\n    if (submit) {\n      this._userService.delete(id).then(() => {\n        this.setState({\n          users: users.filter((item: User) => item._id !== id),\n        });\n      });\n    } else {\n      this.setState({\n        idOfItemToBeDeleted: id,\n      });\n    }\n  };\n\n  render() {\n    let {\n      users,\n      successAlert,\n      errorAlert,\n      userToBeEdited,\n      idOfItemToBeDeleted,\n      isLoading,\n      isCreateModalOpened,\n      isSubmitting,\n    } = this.state;\n\n    return (\n      <AdminLayout>\n        <header className=\"d-flex justify-content-between container mt-5\">\n          <h2> Users </h2>\n          <button\n            className=\"btn btn-success\"\n            onClick={() => this.setState({ isCreateModalOpened: true })}\n          >\n            <FontAwesomeIcon icon={faPlus} /> Create New User\n          </button>\n        </header>\n        {isLoading ? (\n          <div className=\"text-center mt-5\">\n            <Loading />\n          </div>\n        ) : users.length > 0 ? (\n          <div className=\"container mt-5\">\n            <AdminTable\n              config={this.tableConfig}\n              triggerEditEvent={this.editUser}\n              deleteRow={this.removeUser}\n              tableBody={users as any}\n            />\n          </div>\n        ) : (\n          <div className=\"text-center my-5\">\n            <p>No users yet</p>\n          </div>\n        )}\n\n        {Object.keys(userToBeEdited).length > 1 && (\n          <UserForm\n            isModalOpened={Object.keys(userToBeEdited).length > 1}\n            itemToBeEdited={userToBeEdited}\n            onSubmit={this.editUser}\n            isSubmitting={isSubmitting}\n            closeModal={() => this.setState({ userToBeEdited: {} as User })}\n          />\n        )}\n\n        <UserForm\n          isModalOpened={isCreateModalOpened}\n          isSubmitting={isSubmitting}\n          onSubmit={this.createUser}\n          closeModal={() => this.setState({ isCreateModalOpened: false })}\n        />\n\n        <SweetAlert\n          show={!!successAlert}\n          success\n          title={successAlert || \" \"}\n          timeout={2000}\n          onConfirm={() => this.setState({ successAlert: null })}\n        />\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes, delete it!\"\n          confirmBtnBsStyle=\"danger\"\n          title=\"Are you sure?\"\n          onConfirm={() => {\n            this.removeUser(idOfItemToBeDeleted, true);\n            this.setState({ idOfItemToBeDeleted: \"\" });\n          }}\n          onCancel={() => this.setState({ idOfItemToBeDeleted: \"\" })}\n          focusCancelBtn\n          show={!!idOfItemToBeDeleted}\n        >\n          You will not be able to recover this item !\n        </SweetAlert>\n      </AdminLayout>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"react-responsive-modal/styles.css\";\nimport { Modal } from \"react-responsive-modal\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\n\nimport { Committee } from \"configurations/interfaces/committee.interface\";\nimport Loading from \"shared/loading\";\nimport FormInput from \"shared/Input\";\nimport { isEmpty } from \"shared/services/validation.service\";\n\ninterface Prop {\n  isModalOpened: boolean;\n  onSubmit: (item: any, submit: boolean, id?: string) => Promise<void>;\n  closeModal: () => void;\n  itemToBeEdited?: any;\n  isSubmitting?: boolean;\n}\n\ninterface State {\n  committee: Committee;\n  isLoading: boolean;\n  errorAlert: string;\n}\n\nexport default class CommitteeForm extends Component<Prop, State> {\n  state = {\n    committee: {\n      name: \"\",\n    },\n    isLoading: false,\n    errorAlert: \"\",\n  };\n\n  componentDidMount() {\n    let { itemToBeEdited } = this.props;\n\n    if (itemToBeEdited) {\n      itemToBeEdited.date = this.formatDate();\n      this.setState({ committee: itemToBeEdited });\n    }\n  }\n\n  formatDate = () => {\n    let currentDateTime = new Date();\n    let formattedDate =\n      currentDateTime.getFullYear() +\n      \"-\" +\n      (currentDateTime.getMonth() + 1) +\n      \"-\" +\n      currentDateTime.getDate();\n\n    return formattedDate;\n  };\n\n  handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    let { name, value } = e.currentTarget;\n\n    this.setState({\n      committee: {\n        ...this.state.committee,\n        [name]: value,\n      } as any,\n    });\n  };\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let { committee } = this.state;\n    if (isEmpty(committee.name)) {\n      this.setState({\n        errorAlert: \"Please make sure to fill the name of the committee !\",\n      });\n    } else {\n      this.props.onSubmit(committee, true).then(() => {\n        this.resetObj(committee);\n        this.setState({ committee: committee });\n      });\n    }\n  };\n\n  resetObj(obj: any) {\n    for (let prop in obj) {\n      obj[prop] = \"\";\n    }\n  }\n\n  render() {\n    let {\n      isModalOpened,\n      itemToBeEdited,\n      closeModal,\n      isSubmitting,\n    } = this.props;\n    let { committee, isLoading, errorAlert } = this.state;\n\n    return (\n      <Modal\n        open={isModalOpened}\n        onClose={() => closeModal()}\n        center\n        styles={{\n          modal: {\n            animation: `${\n              isModalOpened ? \"customEnterAnimation\" : \"customLeaveAnimation\"\n            } 500ms`,\n          },\n        }}\n      >\n        {isLoading ? (\n          <Loading />\n        ) : (\n          <>\n            <h3 className=\"mb-3\"> Committee </h3>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"form-group col-md-12\">\n                  <FormInput\n                    type=\"text\"\n                    required={true}\n                    placeholder=\"Committee name\"\n                    label=\"Name\"\n                    id=\"name\"\n                    name=\"name\"\n                    errorPosition=\"bottom\"\n                    value={committee.name}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting\n                  ? \"Loading ...\"\n                  : itemToBeEdited\n                  ? \"Save\"\n                  : \"Create\"}\n              </button>\n            </form>\n          </>\n        )}\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport AdminLayout from \"shared/admin-layout\";\nimport AdminTable from \"shared/admin-table\";\nimport Loading from \"shared/loading\";\nimport CommitteeForm from \"../committeeForm\";\n\nimport UserService from \"modules/users/services/user.service\";\nimport CommitteeService from \"modules/committees/services/committee.service\";\nimport { Committee } from \"configurations/interfaces/committee.interface\";\n\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\ninterface State {\n  committees: Committee[];\n  committeeToBeEdited?: Committee | null;\n  successAlert: string;\n  errorAlert: string;\n  isLoading: boolean;\n  isCreateModalOpened: boolean;\n  isSubmitting: boolean;\n  idOfItemToBeDeleted: string;\n}\n\nexport default class CommitteesListPage extends Component<Prop, State> {\n  tableConfig = {\n    tableHeaders: [\"name\"],\n    className: \"table-striped\",\n    actions: [\"edit\", \"delete\"],\n  };\n\n  state = {\n    committees: [] as Committee[],\n    successAlert: \"\",\n    errorAlert: \"\",\n    committeeToBeEdited: {} as Committee,\n    isLoading: false,\n    isCreateModalOpened: false,\n    isSubmitting: false,\n    idOfItemToBeDeleted: \"\",\n  };\n\n  public _committeeService: CommitteeService;\n  public _userService: UserService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._committeeService = new CommitteeService();\n    this._userService = new UserService();\n  }\n\n  async componentDidMount() {\n    if (!this._userService.isUserLoggedIn())\n      return this.props.history.push(\"/login\");\n    this.setState({ isLoading: true });\n    try {\n      let committees = await this._committeeService.list();\n\n      this.setState({ committees, isLoading: false });\n    } catch {\n      this.setState({ errorAlert: \"Error retrieving items\", isLoading: false });\n    }\n  }\n\n  createCommittee = (committee: Committee) => {\n    let { committees } = this.state;\n\n    this.setState({\n      isSubmitting: true,\n    });\n\n    return this._committeeService\n      .create(committee)\n      .then((response) => {\n        committees.unshift(response as never);\n\n        this.setState({\n          committees,\n          successAlert: \"Committee added successfully\",\n          errorAlert: \"\",\n          isCreateModalOpened: false,\n          isSubmitting: false,\n        });\n      })\n      .catch((err) => {\n        this.setState({\n          errorAlert: \"An error occurred\",\n          successAlert: \"\",\n          isSubmitting: false,\n        });\n      });\n  };\n\n  editCommittee = (\n    committee: Committee,\n    submit: boolean,\n    id = this.state.committeeToBeEdited._id\n  ) => {\n    if (submit) {\n      this.setState({\n        isSubmitting: true,\n      });\n      return this._committeeService\n        .update(id, committee)\n        .then((response) => {\n          this.updateStateWithNewCommittee(response);\n          this.setState({\n            isSubmitting: false,\n            successAlert: \"Committee updated successfully\",\n            errorAlert: \"\",\n            committeeToBeEdited: {} as Committee,\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            errorAlert: err.response.data.msg,\n          });\n        });\n    } else {\n      this.setState({\n        isSubmitting: false,\n        committeeToBeEdited: committee,\n      });\n    }\n  };\n\n  updateStateWithNewCommittee = (committee: Committee) => {\n    let { committees } = this.state;\n    let objectToUpdateIndex: number = committees.findIndex(\n      (item: Committee) => item._id === committee._id\n    );\n\n    committees.splice(objectToUpdateIndex, 1, committee as never);\n\n    this.setState({ committees });\n  };\n\n  removeCommittee = (id: string, submit?: boolean) => {\n    let { committees } = this.state;\n\n    if (submit) {\n      this._committeeService\n        .delete(id)\n        .then(() => {\n          this.setState({\n            committees: committees.filter((item: Committee) => item._id !== id),\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            errorAlert: err.response.data.msg,\n          });\n        });\n    } else {\n      this.setState({\n        idOfItemToBeDeleted: id,\n      });\n    }\n  };\n\n  render() {\n    let {\n      committees,\n      successAlert,\n      errorAlert,\n      committeeToBeEdited,\n      idOfItemToBeDeleted,\n      isLoading,\n      isCreateModalOpened,\n      isSubmitting,\n    } = this.state;\n\n    return (\n      <AdminLayout>\n        <header className=\"d-flex justify-content-between container mt-5\">\n          <h2> Committees </h2>\n          <button\n            className=\"btn btn-success\"\n            onClick={() => this.setState({ isCreateModalOpened: true })}\n          >\n            <FontAwesomeIcon icon={faPlus} /> Create New Committee\n          </button>\n        </header>\n        {isLoading ? (\n          <div className=\"text-center mt-5\">\n            <Loading />\n          </div>\n        ) : committees.length > 0 ? (\n          <div className=\"container mt-5\">\n            <AdminTable\n              config={this.tableConfig}\n              triggerEditEvent={this.editCommittee}\n              deleteRow={this.removeCommittee}\n              tableBody={committees as any}\n            />\n          </div>\n        ) : (\n          <div className=\"text-center my-5\">\n            <p>No committees yet</p>\n          </div>\n        )}\n\n        {Object.keys(committeeToBeEdited).length > 1 && (\n          <CommitteeForm\n            isModalOpened={Object.keys(committeeToBeEdited).length > 1}\n            itemToBeEdited={committeeToBeEdited}\n            onSubmit={this.editCommittee}\n            isSubmitting={isSubmitting}\n            closeModal={() =>\n              this.setState({ committeeToBeEdited: {} as Committee })\n            }\n          />\n        )}\n\n        <CommitteeForm\n          isModalOpened={isCreateModalOpened}\n          isSubmitting={isSubmitting}\n          onSubmit={this.createCommittee}\n          closeModal={() => this.setState({ isCreateModalOpened: false })}\n        />\n\n        <SweetAlert\n          show={!!successAlert}\n          success\n          title={successAlert || \" \"}\n          timeout={2000}\n          onConfirm={() => this.setState({ successAlert: null })}\n        />\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes, delete it!\"\n          confirmBtnBsStyle=\"danger\"\n          title=\"Are you sure?\"\n          onConfirm={() => {\n            this.removeCommittee(idOfItemToBeDeleted, true);\n            this.setState({ idOfItemToBeDeleted: \"\" });\n          }}\n          onCancel={() => this.setState({ idOfItemToBeDeleted: \"\" })}\n          focusCancelBtn\n          show={!!idOfItemToBeDeleted}\n        >\n          You will not be able to recover this item !\n        </SweetAlert>\n      </AdminLayout>\n    );\n  }\n}\n","import axios from \"axios\";\n\nexport let uploadImage = (image: Blob | null) => {\n  let url = \"https://api.cloudinary.com/v1_1/dykflps8g/image/upload\";\n  let fd = new FormData();\n  fd.append(\"file\", image as Blob);\n  fd.append(\"api_key\", 293517195754478 as any);\n  fd.append(\"upload_preset\", \"z1ti5v7g\");\n  fd.append(\n    \"api_secret\",\n    process.env.REACT_APP_CLOUDINARY_SECRET_API_KEY as string\n  );\n\n  return axios.post(url, fd);\n};\n","import React, { Component } from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { uploadImage } from \"shared/services/uploadImage.service\";\n\ninterface Prop {\n  setImageUpload: (status: boolean, imageUrl?: string) => void;\n  imgUrl: string;\n  name?: string;\n  label?: string;\n  id?: string;\n  required?: boolean;\n}\n\ninterface State {\n  isImageUploaded: boolean;\n  image: string;\n}\n\nexport default class ImageInput extends Component<Prop, State> {\n  state = {\n    isImageUploaded: false,\n    image: \"\",\n  };\n\n  handleImageInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n    let { setImageUpload } = this.props;\n    let { files } = e.currentTarget;\n\n    setImageUpload(true);\n    uploadImage(files && files[0]).then((res) => {\n      this.setState({\n        isImageUploaded: true,\n        // image: res.data.secure_url,\n      });\n\n      setImageUpload(false, res.data.secure_url);\n    });\n  };\n\n  renderImageUpload = () => (\n    <div className=\"form-group\">\n      <label htmlFor={this.props.id || \"cover\"}>\n        {this.props.label || \"Upload Image\"}{\" \"}\n        {this.props.required && <span className=\"error\">*</span>}\n      </label>\n      <input\n        type=\"file\"\n        onChange={this.handleImageInputChange}\n        className=\"form-control-file\"\n        id={this.props.id || \"cover\"}\n        accept=\"image/*\"\n        name={this.props.name || \"cover\"}\n      />\n    </div>\n  );\n\n  renderImagePreview = () => (\n    <section className=\"img-preview\">\n      <img\n        src={this.state.image || this.props.imgUrl}\n        className=\"d-block\"\n        width=\"100%\"\n        alt=\"Preview\"\n      />\n      <span onClick={this.removeImage} className=\"preview-dismiss\">\n        <FontAwesomeIcon icon={faTimes} />\n      </span>\n    </section>\n  );\n\n  removeImage = () => {\n    this.setState({ isImageUploaded: false, image: \"\" });\n  };\n\n  componentDidMount() {\n    if (this.props.imgUrl) this.setState({ image: this.props.imgUrl });\n  }\n\n  componentDidUpdate(prevProps: any) {\n    if (\n      this.props.imgUrl !== this.state.image &&\n      this.props.imgUrl !== prevProps.imgUrl\n    ) {\n      this.setState({ image: this.props.imgUrl });\n    }\n  }\n\n  render() {\n    let { image } = this.state;\n    return <>{!image ? this.renderImageUpload() : this.renderImagePreview()}</>;\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"react-responsive-modal/styles.css\";\nimport { Modal } from \"react-responsive-modal\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\n\nimport { BestMember } from \"configurations/interfaces/best-member.interface\";\nimport { Committee } from \"configurations/interfaces/committee.interface\";\nimport CommitteeService from \"modules/committees/services/committee.service\";\nimport Loading from \"shared/loading\";\nimport FormInput from \"shared/Input\";\nimport ImageInput from \"shared/image-input\";\nimport { isEmpty } from \"shared/services/validation.service\";\n\ninterface Prop {\n  isModalOpened: boolean;\n  onSubmit: (item: any, submit: boolean, id?: string) => Promise<void>;\n  closeModal: () => void;\n  itemToBeEdited?: any;\n  isSubmitting?: boolean;\n}\n\ninterface State {\n  bestMember: BestMember;\n  isLoading: boolean;\n  isImageUploading: boolean;\n  committees: string[];\n  errorAlert: string;\n}\n\nexport default class BestMemberForm extends Component<Prop, State> {\n  state = {\n    bestMember: {\n      name: \"\",\n      image: \"\",\n      committee: \"\",\n    },\n    committees: [] as string[],\n    errorAlert: \"\",\n    isLoading: false,\n    isImageUploading: false,\n  };\n\n  _committeeService: CommitteeService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._committeeService = new CommitteeService();\n  }\n\n  componentDidMount() {\n    let { itemToBeEdited } = this.props;\n\n    if (itemToBeEdited) {\n      itemToBeEdited.date = this.formatDate();\n      this.setState({ bestMember: itemToBeEdited });\n    }\n\n    this._committeeService.list().then((response) => {\n      this.setState({\n        committees: this.generateArrayOfCommitteesNames(response),\n      });\n    });\n  }\n\n  generateArrayOfCommitteesNames = (committeesArray: Committee[]): string[] => {\n    let committeesNames: string[] = [];\n    committeesArray.map(({ name }) => committeesNames.push(name));\n\n    return committeesNames;\n  };\n\n  setImageUpload = (status: boolean, imageUrl?: string) => {\n    this.setState({ isImageUploading: status });\n    if (imageUrl)\n      this.setState({\n        bestMember: { ...this.state.bestMember, image: imageUrl } as any,\n      });\n  };\n\n  formatDate = () => {\n    let currentDateTime = new Date();\n    let formattedDate =\n      currentDateTime.getFullYear() +\n      \"-\" +\n      (currentDateTime.getMonth() + 1) +\n      \"-\" +\n      currentDateTime.getDate();\n\n    return formattedDate;\n  };\n\n  handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    let { name, value } = e.currentTarget;\n\n    this.setState({\n      bestMember: {\n        ...this.state.bestMember,\n        [name]: value,\n      } as any,\n    });\n  };\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let { bestMember } = this.state;\n\n    if (\n      isEmpty(bestMember.committee) ||\n      isEmpty(bestMember.image) ||\n      isEmpty(bestMember.name)\n    ) {\n      this.setState({\n        errorAlert: \"Please make sure to fill all the required fields !\",\n      });\n    } else {\n      this.props.onSubmit(bestMember, true).then(() => {\n        this.resetObj(bestMember);\n        this.setState({ bestMember: bestMember });\n      });\n    }\n  };\n\n  resetObj(obj: any) {\n    for (let prop in obj) {\n      obj[prop] = \"\";\n    }\n  }\n\n  render() {\n    let {\n      isModalOpened,\n      itemToBeEdited,\n      closeModal,\n      isSubmitting,\n    } = this.props;\n    let { bestMember, isLoading, isImageUploading, committees } = this.state;\n\n    return (\n      <Modal\n        open={isModalOpened}\n        onClose={() => closeModal()}\n        center\n        styles={{\n          modal: {\n            animation: `${\n              isModalOpened ? \"customEnterAnimation\" : \"customLeaveAnimation\"\n            } 500ms`,\n          },\n        }}\n      >\n        {isLoading ? (\n          <Loading />\n        ) : (\n          <>\n            <h3 className=\"mb-3\"> Best Members </h3>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"form-group col-md-12\">\n                  <FormInput\n                    type=\"text\"\n                    required={true}\n                    placeholder=\"Name of the member\"\n                    label=\"Member name\"\n                    id=\"name\"\n                    name=\"name\"\n                    errorPosition=\"bottom\"\n                    value={bestMember.name}\n                    onChange={this.handleChange}\n                  />\n                </div>\n                <div className=\"form-group col-md-12\">\n                  <FormInput\n                    type=\"select\"\n                    className=\"form-control\"\n                    options={\n                      committees && committees.length > 0 ? committees : []\n                    }\n                    required={true}\n                    label=\"Committee\"\n                    id=\"committee\"\n                    name=\"committee\"\n                    errorPosition=\"bottom\"\n                    value={bestMember.committee}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <ImageInput\n                imgUrl={bestMember.image}\n                name=\"image\"\n                required={true}\n                setImageUpload={this.setImageUpload}\n              />\n\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting || isImageUploading}\n              >\n                {isImageUploading\n                  ? \"Uploading...\"\n                  : isSubmitting\n                  ? \"Loading ...\"\n                  : itemToBeEdited\n                  ? \"Save\"\n                  : \"Create\"}\n              </button>\n            </form>\n          </>\n        )}\n      </Modal>\n    );\n  }\n}\n","import CrudService from \"configurations/crud.service\";\n\nexport default class BestMembersService extends CrudService {\n  constructor() {\n    super();\n    this.initialize(\"/best-members\");\n  }\n}\n","import React, { Component } from \"react\";\n\nimport AdminLayout from \"shared/admin-layout\";\nimport AdminTable from \"shared/admin-table\";\nimport Loading from \"shared/loading\";\nimport BestMemberForm from \"../form\";\n\nimport UserService from \"modules/users/services/user.service\";\nimport BestMembersService from \"modules/best-members/services/best-member.service\";\nimport { BestMember } from \"configurations/interfaces/best-member.interface\";\n\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\ninterface State {\n  bestMembers: BestMember[];\n  bestMemberToBeEdited?: BestMember | null;\n  successAlert: string;\n  errorAlert: string;\n  isLoading: boolean;\n  isCreateModalOpened: boolean;\n  isSubmitting: boolean;\n  idOfItemToBeDeleted: string;\n}\n\nexport default class BestMembersListPage extends Component<Prop, State> {\n  tableConfig = {\n    tableHeaders: [\"name\", \"committee\"],\n    className: \"table-striped\",\n    actions: [\"edit\", \"delete\"],\n  };\n\n  state = {\n    bestMembers: [] as BestMember[],\n    successAlert: \"\",\n    errorAlert: \"\",\n    bestMemberToBeEdited: {} as BestMember,\n    isLoading: false,\n    isCreateModalOpened: false,\n    isSubmitting: false,\n    idOfItemToBeDeleted: \"\",\n  };\n\n  public _bestMembersService: BestMembersService;\n  public _userService: UserService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._bestMembersService = new BestMembersService();\n    this._userService = new UserService();\n  }\n\n  async componentDidMount() {\n    if (!this._userService.isUserLoggedIn())\n      return this.props.history.push(\"/login\");\n    this.setState({ isLoading: true });\n    try {\n      let bestMembers = await this._bestMembersService.list();\n\n      this.setState({ bestMembers, isLoading: false });\n    } catch {\n      this.setState({ errorAlert: \"Error retrieving items\", isLoading: false });\n    }\n  }\n\n  createBestMember = (bestMember: BestMember) => {\n    let { bestMembers } = this.state;\n\n    this.setState({\n      isSubmitting: true,\n    });\n\n    return this._bestMembersService\n      .create(bestMember)\n      .then((response) => {\n        bestMembers.unshift(response as never);\n\n        this.setState({\n          bestMembers,\n          successAlert: \"Member added successfully\",\n          errorAlert: \"\",\n          isCreateModalOpened: false,\n          isSubmitting: false,\n        });\n      })\n      .catch((err) => {\n        this.setState({\n          errorAlert: \"An error occurred\",\n          successAlert: \"\",\n          isSubmitting: false,\n        });\n      });\n  };\n\n  editBestMember = (\n    bestMember: BestMember,\n    submit: boolean,\n    id = this.state.bestMemberToBeEdited._id\n  ) => {\n    if (submit) {\n      this.setState({\n        isSubmitting: true,\n      });\n      return this._bestMembersService\n        .update(id, bestMember)\n        .then((response) => {\n          this.updateStateWithNewBestMember(response);\n          this.setState({\n            isSubmitting: false,\n            successAlert: \"Member updated successfully\",\n            errorAlert: \"\",\n            bestMemberToBeEdited: {} as BestMember,\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            errorAlert: err.response.data.msg,\n          });\n        });\n    } else {\n      this.setState({\n        isSubmitting: false,\n        bestMemberToBeEdited: bestMember,\n      });\n    }\n  };\n\n  updateStateWithNewBestMember = (bestMember: BestMember) => {\n    let { bestMembers } = this.state;\n    let objectToUpdateIndex: number = bestMembers.findIndex(\n      (item: BestMember) => item._id === bestMember._id\n    );\n\n    bestMembers.splice(objectToUpdateIndex, 1, bestMember as never);\n\n    this.setState({ bestMembers });\n  };\n\n  removeBestMember = (id: string, submit?: boolean) => {\n    let { bestMembers } = this.state;\n\n    if (submit) {\n      this._bestMembersService.delete(id).then(() => {\n        this.setState({\n          bestMembers: bestMembers.filter(\n            (item: BestMember) => item._id !== id\n          ),\n        });\n      });\n    } else {\n      this.setState({\n        idOfItemToBeDeleted: id,\n      });\n    }\n  };\n\n  render() {\n    let {\n      bestMembers,\n      successAlert,\n      errorAlert,\n      bestMemberToBeEdited,\n      idOfItemToBeDeleted,\n      isLoading,\n      isCreateModalOpened,\n      isSubmitting,\n    } = this.state;\n\n    return (\n      <AdminLayout>\n        <header className=\"d-flex justify-content-between container mt-5\">\n          <h2> Best Members </h2>\n          <button\n            className=\"btn btn-success\"\n            onClick={() => this.setState({ isCreateModalOpened: true })}\n          >\n            <FontAwesomeIcon icon={faPlus} /> Create New Member\n          </button>\n        </header>\n        {isLoading ? (\n          <div className=\"text-center mt-5\">\n            <Loading />\n          </div>\n        ) : bestMembers.length > 0 ? (\n          <div className=\"container mt-5\">\n            <AdminTable\n              config={this.tableConfig}\n              triggerEditEvent={this.editBestMember}\n              deleteRow={this.removeBestMember}\n              tableBody={bestMembers as any}\n            />\n          </div>\n        ) : (\n          <div className=\"text-center my-5\">\n            <p>No Members yet</p>\n          </div>\n        )}\n\n        {Object.keys(bestMemberToBeEdited).length > 1 && (\n          <BestMemberForm\n            isModalOpened={Object.keys(bestMemberToBeEdited).length > 1}\n            itemToBeEdited={bestMemberToBeEdited}\n            onSubmit={this.editBestMember}\n            isSubmitting={isSubmitting}\n            closeModal={() =>\n              this.setState({ bestMemberToBeEdited: {} as BestMember })\n            }\n          />\n        )}\n\n        <BestMemberForm\n          isModalOpened={isCreateModalOpened}\n          isSubmitting={isSubmitting}\n          onSubmit={this.createBestMember}\n          closeModal={() => this.setState({ isCreateModalOpened: false })}\n        />\n\n        <SweetAlert\n          show={!!successAlert}\n          success\n          title={successAlert || \" \"}\n          timeout={2000}\n          onConfirm={() => this.setState({ successAlert: null })}\n        />\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes, delete it!\"\n          confirmBtnBsStyle=\"danger\"\n          title=\"Are you sure?\"\n          onConfirm={() => {\n            this.removeBestMember(idOfItemToBeDeleted, true);\n            this.setState({ idOfItemToBeDeleted: \"\" });\n          }}\n          onCancel={() => this.setState({ idOfItemToBeDeleted: \"\" })}\n          focusCancelBtn\n          show={!!idOfItemToBeDeleted}\n        >\n          You will not be able to recover this item !\n        </SweetAlert>\n      </AdminLayout>\n    );\n  }\n}\n","import CrudService from \"configurations/crud.service\";\n\nexport default class MessageService extends CrudService {\n  constructor() {\n    super();\n    this.initialize(\"/messages\");\n  }\n}\n","import React, { Component } from \"react\";\n\nimport AdminLayout from \"shared/admin-layout\";\nimport AdminTable from \"shared/admin-table\";\nimport Loading from \"shared/loading\";\n\nimport UserService from \"modules/users/services/user.service\";\nimport MessageService from \"modules/messages/services/message.service\";\nimport { Message } from \"configurations/interfaces/message.interface\";\n\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport \"react-responsive-modal/styles.css\";\nimport { Modal } from \"react-responsive-modal\";\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\ninterface State {\n  messages: Message[];\n  successAlert: string;\n  errorAlert: string;\n  isLoading: boolean;\n  idOfItemToBeDeleted: string;\n  itemToBeViewed: Message;\n}\n\nexport default class MessagesListPage extends Component<Prop, State> {\n  tableConfig = {\n    tableHeaders: [\"name\", \"subject\"],\n    className: \"table-striped\",\n    actions: [\"view\", \"delete\"],\n  };\n\n  state = {\n    messages: [] as Message[],\n    successAlert: \"\",\n    errorAlert: \"\",\n    isLoading: false,\n    idOfItemToBeDeleted: \"\",\n    itemToBeViewed: {} as Message,\n  };\n\n  public _messageService: MessageService;\n  public _userService: UserService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._messageService = new MessageService();\n    this._userService = new UserService();\n  }\n\n  async componentDidMount() {\n    if (!this._userService.isUserLoggedIn())\n      return this.props.history.push(\"/login\");\n    this.setState({ isLoading: true });\n    try {\n      let messages = await this._messageService.list();\n\n      this.setState({ messages, isLoading: false });\n    } catch {\n      this.setState({ errorAlert: \"Error retrieving items\", isLoading: false });\n    }\n  }\n\n  viewMessage = (message: Message) => {\n    this.setState({ itemToBeViewed: message });\n  };\n\n  closeViewModal = () => {\n    this.setState({ itemToBeViewed: {} as Message });\n  };\n\n  removeMessage = (id: string, submit?: boolean) => {\n    let { messages } = this.state;\n\n    if (submit) {\n      this._messageService\n        .delete(id)\n        .then(() => {\n          this.setState({\n            messages: messages.filter((item: Message) => item._id !== id),\n            successAlert: \"Message removed successfully\",\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            errorAlert: err.response.data.msg,\n          });\n        });\n    } else {\n      this.setState({\n        idOfItemToBeDeleted: id,\n      });\n    }\n  };\n\n  render() {\n    let {\n      messages,\n      successAlert,\n      errorAlert,\n      idOfItemToBeDeleted,\n      itemToBeViewed,\n      isLoading,\n    } = this.state;\n\n    return (\n      <AdminLayout>\n        <header className=\"d-flex justify-content-between container mt-5\">\n          <h2> Messages </h2>\n        </header>\n        {isLoading ? (\n          <div className=\"text-center mt-5\">\n            <Loading />\n          </div>\n        ) : messages.length > 0 ? (\n          <div className=\"container mt-5\">\n            <AdminTable\n              config={this.tableConfig}\n              triggerViewEvent={this.viewMessage}\n              deleteRow={this.removeMessage}\n              tableBody={messages as any}\n            />\n          </div>\n        ) : (\n          <div className=\"text-center my-5\">\n            <p>No messages yet</p>\n          </div>\n        )}\n\n        <Modal\n          open={Object.keys(itemToBeViewed).length > 0}\n          onClose={this.closeViewModal}\n          center\n        >\n          <h3> {itemToBeViewed.subject} </h3>\n          <hr />\n          <p className=\"p-3\"> {itemToBeViewed.message} </p>\n        </Modal>\n\n        <SweetAlert\n          show={!!successAlert}\n          success\n          title={successAlert || \" \"}\n          timeout={2000}\n          onConfirm={() => this.setState({ successAlert: null })}\n        />\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes, delete it!\"\n          confirmBtnBsStyle=\"danger\"\n          title=\"Are you sure?\"\n          onConfirm={() => {\n            this.removeMessage(idOfItemToBeDeleted, true);\n            this.setState({ idOfItemToBeDeleted: \"\" });\n          }}\n          onCancel={() => this.setState({ idOfItemToBeDeleted: \"\" })}\n          focusCancelBtn\n          show={!!idOfItemToBeDeleted}\n        >\n          You will not be able to recover this item !\n        </SweetAlert>\n      </AdminLayout>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"react-responsive-modal/styles.css\";\nimport { Modal } from \"react-responsive-modal\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\n\nimport Loading from \"shared/loading\";\nimport FormInput from \"shared/Input\";\nimport { Email } from \"configurations/interfaces/email.interface\";\nimport { isEmpty } from \"shared/services/validation.service\";\n\ninterface Prop {\n  isModalOpened: boolean;\n  onSubmit: (item: Email) => Promise<void>;\n  closeModal: () => void;\n  itemToBeEdited?: any;\n  isSubmitting?: boolean;\n}\n\ninterface State {\n  email: Email;\n  isLoading: boolean;\n  errorAlert: string,\n}\n\nexport default class EmailForm extends Component<Prop, State> {\n  state = {\n    email: {\n      subject: \"\",\n      body: \"\",\n    },\n    isLoading: false,\n    errorAlert: \"\",\n  };\n\n  handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    let { name, value } = e.currentTarget;\n\n    this.setState({\n      email: {\n        ...this.state.email,\n        [name]: value,\n      } as any,\n    });\n  };\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let { email } = this.state;\n\n    if (isEmpty(email.subject) || isEmpty(email.body)) {\n      this.setState({\n        errorAlert: \"Please make sure to fill all the required fields !\",\n      });\n    } else {\n      this.props.onSubmit(email).then(() => {\n        this.resetObj(email);\n        this.setState({ email: email });\n      });\n    }\n  };\n\n  resetObj(obj: any) {\n    for (let prop in obj) {\n      obj[prop] = \"\";\n    }\n  }\n\n  render() {\n    let { isModalOpened, closeModal, isSubmitting } = this.props;\n    let { email, isLoading, errorAlert } = this.state;\n\n    return (\n      <Modal\n        open={isModalOpened}\n        onClose={() => closeModal()}\n        center\n        styles={{\n          modal: {\n            animation: `${\n              isModalOpened ? \"customEnterAnimation\" : \"customLeaveAnimation\"\n            } 500ms`,\n          },\n        }}\n      >\n        {isLoading ? (\n          <Loading />\n        ) : (\n          <>\n            <h3 className=\"mb-3\"> Email </h3>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"form-group col-md-12\">\n                  <FormInput\n                    type=\"text\"\n                    required={true}\n                    placeholder=\"Email Subject\"\n                    label=\"subject\"\n                    id=\"subject\"\n                    name=\"subject\"\n                    errorPosition=\"bottom\"\n                    value={email.subject}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"form-group col-12\">\n                  <FormInput\n                    type=\"textarea\"\n                    required={true}\n                    label=\"body\"\n                    id=\"body\"\n                    name=\"body\"\n                    rows=\"5\"\n                    errorPosition=\"bottom\"\n                    value={email.body}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? \"Sending ...\" : \"Send\"}\n              </button>\n            </form>\n          </>\n        )}\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n      </Modal>\n    );\n  }\n}\n","import CrudService from \"configurations/crud.service\";\nimport { Email } from \"configurations/interfaces/email.interface\";\n\nexport default class SubscriberService extends CrudService {\n  constructor() {\n    super();\n    this.initialize(\"/subscribers\");\n  }\n\n  async sendEmail(email: Email) {\n    let { data } = await this._http.post(`${this.url}/email`, email);\n    return data;\n  }\n}\n","import React, { Component } from \"react\";\n\nimport AdminLayout from \"shared/admin-layout\";\nimport AdminTable from \"shared/admin-table\";\nimport Loading from \"shared/loading\";\nimport EmailForm from \"../form\";\n\nimport UserService from \"modules/users/services/user.service\";\nimport SubscriberService from \"modules/subscribtion/services/subscriber.service\";\nimport { Subscriber } from \"configurations/interfaces/subscriber.interface\";\nimport { Email } from \"configurations/interfaces/email.interface\";\n\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\ninterface State {\n  subscribers: Subscriber[];\n  successAlert: string;\n  errorAlert: string;\n  isLoading: boolean;\n  isCreateModalOpened: boolean;\n  isSubmitting: boolean;\n  idOfItemToBeDeleted: string;\n}\n\nexport default class SubscribersListPage extends Component<Prop, State> {\n  tableConfig = {\n    tableHeaders: [\"email\"],\n    className: \"table-striped\",\n    actions: [\"delete\"],\n  };\n\n  state = {\n    subscribers: [] as Subscriber[],\n    successAlert: \"\",\n    errorAlert: \"\",\n    isLoading: false,\n    isCreateModalOpened: false,\n    isSubmitting: false,\n    idOfItemToBeDeleted: \"\",\n  };\n\n  public _subscriberService: SubscriberService;\n  public _userService: UserService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._subscriberService = new SubscriberService();\n    this._userService = new UserService();\n  }\n\n  async componentDidMount() {\n    if (!this._userService.isUserLoggedIn())\n      return this.props.history.push(\"/login\");\n    this.setState({ isLoading: true });\n    try {\n      let subscribers = await this._subscriberService.list();\n\n      this.setState({ subscribers, isLoading: false });\n    } catch {\n      this.setState({ errorAlert: \"Error retrieving items\", isLoading: false });\n    }\n  }\n\n  sendEmailToSubscribers = (email: Email) => {\n    return this._subscriberService\n      .sendEmail(email)\n      .then((response) => {\n        this.setState({ successAlert: response.msg });\n      })\n      .catch((err) => this.setState({ errorAlert: err.response.data.msg }));\n  };\n\n  removeSubscriber = (id: string, submit?: boolean) => {\n    let { subscribers } = this.state;\n\n    if (submit) {\n      this._subscriberService\n        .delete(id)\n        .then(() => {\n          this.setState({\n            subscribers: subscribers.filter(\n              (item: Subscriber) => item._id !== id\n            ),\n            successAlert: \"Subscriber removed successfully\",\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            errorAlert: err.response.data.msg,\n          });\n        });\n    } else {\n      this.setState({\n        idOfItemToBeDeleted: id,\n      });\n    }\n  };\n\n  render() {\n    let {\n      subscribers,\n      successAlert,\n      errorAlert,\n      idOfItemToBeDeleted,\n      isLoading,\n      isCreateModalOpened,\n      isSubmitting,\n    } = this.state;\n\n    return (\n      <AdminLayout>\n        <header className=\"d-flex justify-content-between container mt-5\">\n          <h2> Subscribers </h2>\n          <button\n            className=\"btn btn-success\"\n            onClick={() => this.setState({ isCreateModalOpened: true })}\n          >\n            <FontAwesomeIcon icon={faPlus} /> Create New Email\n          </button>\n        </header>\n        {isLoading ? (\n          <div className=\"text-center mt-5\">\n            <Loading />\n          </div>\n        ) : subscribers.length > 0 ? (\n          <div className=\"container mt-5\">\n            <AdminTable\n              config={this.tableConfig}\n              deleteRow={this.removeSubscriber}\n              tableBody={subscribers as any}\n            />\n          </div>\n        ) : (\n          <div className=\"text-center my-5\">\n            <p>No subscribers yet</p>\n          </div>\n        )}\n\n        <EmailForm\n          isModalOpened={isCreateModalOpened}\n          isSubmitting={isSubmitting}\n          onSubmit={this.sendEmailToSubscribers}\n          closeModal={() => this.setState({ isCreateModalOpened: false })}\n        />\n\n        <SweetAlert\n          show={!!successAlert}\n          success\n          title={successAlert || \" \"}\n          timeout={2000}\n          onConfirm={() => this.setState({ successAlert: null })}\n        />\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes, delete it!\"\n          confirmBtnBsStyle=\"danger\"\n          title=\"Are you sure?\"\n          onConfirm={() => {\n            this.removeSubscriber(idOfItemToBeDeleted, true);\n            this.setState({ idOfItemToBeDeleted: \"\" });\n          }}\n          onCancel={() => this.setState({ idOfItemToBeDeleted: \"\" })}\n          focusCancelBtn\n          show={!!idOfItemToBeDeleted}\n        >\n          You will not be able to recover this item !\n        </SweetAlert>\n      </AdminLayout>\n    );\n  }\n}\n","import CrudService from \"configurations/crud.service\";\n\nexport default class CategoriesService extends CrudService {\n  constructor() {\n    super();\n    this.initialize(\"/categories\");\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"react-responsive-modal/styles.css\";\nimport { Modal } from \"react-responsive-modal\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\n\nimport { Category } from \"configurations/interfaces/category.interface\";\nimport CategoriesService from \"modules/categories/services/categories.service\";\n\nimport Loading from \"shared/loading\";\nimport FormInput from \"shared/Input\";\nimport { isEmpty } from \"shared/services/validation.service\";\n\ninterface Prop {\n  isModalOpened: boolean;\n  onSubmit: (item: any, submit: boolean, id?: string) => Promise<void>;\n  closeModal: () => void;\n  itemToBeEdited?: any;\n  isSubmitting?: boolean;\n}\n\ninterface State {\n  category: Category;\n  isLoading: boolean;\n  errorAlert: string;\n}\n\nexport default class BestMemberForm extends Component<Prop, State> {\n  state = {\n    category: {\n      name: \"\",\n    },\n    errorAlert: \"\",\n    isLoading: false,\n  };\n\n  _categoryService: CategoriesService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._categoryService = new CategoriesService();\n  }\n\n  componentDidMount() {\n    let { itemToBeEdited } = this.props;\n\n    if (itemToBeEdited) {\n      itemToBeEdited.date = this.formatDate();\n      this.setState({ category: itemToBeEdited });\n    }\n  }\n\n  formatDate = () => {\n    let currentDateTime = new Date();\n    let formattedDate =\n      currentDateTime.getFullYear() +\n      \"-\" +\n      (currentDateTime.getMonth() + 1) +\n      \"-\" +\n      currentDateTime.getDate();\n\n    return formattedDate;\n  };\n\n  handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    let { name, value } = e.currentTarget;\n\n    this.setState({\n      category: {\n        ...this.state.category,\n        [name]: value,\n      } as any,\n    });\n  };\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let { category } = this.state;\n\n    if (isEmpty(category.name)) {\n      this.setState({\n        errorAlert: \"Please make sure to fill the name of the category !\",\n      });\n    }\n\n    this.props.onSubmit(category, true).then(() => {\n      this.resetObj(category);\n      this.setState({ category: category });\n    });\n  };\n\n  resetObj(obj: any) {\n    for (let prop in obj) {\n      obj[prop] = \"\";\n    }\n  }\n\n  render() {\n    let {\n      isModalOpened,\n      itemToBeEdited,\n      closeModal,\n      isSubmitting,\n    } = this.props;\n    let { category, isLoading, errorAlert } = this.state;\n\n    return (\n      <Modal\n        open={isModalOpened}\n        onClose={() => closeModal()}\n        center\n        styles={{\n          modal: {\n            animation: `${\n              isModalOpened ? \"customEnterAnimation\" : \"customLeaveAnimation\"\n            } 500ms`,\n          },\n        }}\n      >\n        {isLoading ? (\n          <Loading />\n        ) : (\n          <>\n            <h3 className=\"mb-3\"> Categories </h3>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"form-group col-md-12\">\n                  <FormInput\n                    type=\"text\"\n                    required={true}\n                    placeholder=\"Name of the category\"\n                    label=\"Category name\"\n                    id=\"name\"\n                    name=\"name\"\n                    errorPosition=\"bottom\"\n                    value={category.name}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting\n                  ? \"Loading ...\"\n                  : itemToBeEdited\n                  ? \"Save\"\n                  : \"Create\"}\n              </button>\n            </form>\n          </>\n        )}\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport AdminLayout from \"shared/admin-layout\";\nimport AdminTable from \"shared/admin-table\";\nimport Loading from \"shared/loading\";\nimport BestMemberForm from \"../form\";\n\nimport UserService from \"modules/users/services/user.service\";\nimport { Category } from \"configurations/interfaces/category.interface\";\n\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport CategoriesService from \"modules/categories/services/categories.service\";\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\ninterface State {\n  categories: Category[];\n  categoryToBeEdited?: Category | null;\n  successAlert: string;\n  errorAlert: string;\n  isLoading: boolean;\n  isCreateModalOpened: boolean;\n  isSubmitting: boolean;\n  idOfItemToBeDeleted: string;\n}\n\nexport default class CategoriesListPage extends Component<Prop, State> {\n  tableConfig = {\n    tableHeaders: [\"name\"],\n    className: \"table-striped\",\n    actions: [\"edit\", \"delete\"],\n  };\n\n  state = {\n    categories: [] as Category[],\n    successAlert: \"\",\n    errorAlert: \"\",\n    categoryToBeEdited: {} as Category,\n    isLoading: false,\n    isCreateModalOpened: false,\n    isSubmitting: false,\n    idOfItemToBeDeleted: \"\",\n  };\n\n  public _categoriesService: CategoriesService;\n  public _userService: UserService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._categoriesService = new CategoriesService();\n    this._userService = new UserService();\n  }\n\n  async componentDidMount() {\n    if (!this._userService.isUserLoggedIn())\n      return this.props.history.push(\"/login\");\n    this.setState({ isLoading: true });\n    try {\n      let categories = await this._categoriesService.list();\n\n      this.setState({ categories, isLoading: false });\n    } catch {\n      this.setState({ errorAlert: \"Error retrieving items\", isLoading: false });\n    }\n  }\n\n  createCategory = (category: Category) => {\n    let { categories } = this.state;\n\n    this.setState({\n      isSubmitting: true,\n    });\n\n    return this._categoriesService\n      .create(category)\n      .then((response) => {\n        categories.unshift(response as never);\n\n        this.setState({\n          categories,\n          successAlert: \"Category added successfully\",\n          errorAlert: \"\",\n          isCreateModalOpened: false,\n          isSubmitting: false,\n        });\n      })\n      .catch((err) => {\n        this.setState({\n          errorAlert: \"An error occurred\",\n          successAlert: \"\",\n          isSubmitting: false,\n        });\n      });\n  };\n\n  editCategory = (\n    category: Category,\n    submit: boolean,\n    id = this.state.categoryToBeEdited._id\n  ) => {\n    if (submit) {\n      this.setState({\n        isSubmitting: true,\n      });\n      return this._categoriesService\n        .update(id, category)\n        .then((response) => {\n          this.updateStateWithNewCategory(response);\n          this.setState({\n            isSubmitting: false,\n            successAlert: \"Category updated successfully\",\n            errorAlert: \"\",\n            categoryToBeEdited: {} as Category,\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            errorAlert: err.response.data.msg,\n          });\n        });\n    } else {\n      this.setState({\n        isSubmitting: false,\n        categoryToBeEdited: category,\n      });\n    }\n  };\n\n  updateStateWithNewCategory = (category: Category) => {\n    let { categories } = this.state;\n    let objectToUpdateIndex: number = categories.findIndex(\n      (item: Category) => item._id === category._id\n    );\n\n    categories.splice(objectToUpdateIndex, 1, category as never);\n\n    this.setState({ categories });\n  };\n\n  removeCategory = (id: string, submit?: boolean) => {\n    let { categories } = this.state;\n\n    if (submit) {\n      this._categoriesService\n        .delete(id)\n        .then(() => {\n          this.setState({\n            categories: categories.filter((item: Category) => item._id !== id),\n          });\n        })\n        .catch((err) => {\n          this.setState({ errorAlert: err.response.data.msg });\n        });\n    } else {\n      this.setState({\n        idOfItemToBeDeleted: id,\n      });\n    }\n  };\n\n  render() {\n    let {\n      categories,\n      successAlert,\n      errorAlert,\n      categoryToBeEdited,\n      idOfItemToBeDeleted,\n      isLoading,\n      isCreateModalOpened,\n      isSubmitting,\n    } = this.state;\n\n    return (\n      <AdminLayout>\n        <header className=\"d-flex justify-content-between container mt-5\">\n          <h2> Categories </h2>\n          <button\n            className=\"btn btn-success\"\n            onClick={() => this.setState({ isCreateModalOpened: true })}\n          >\n            <FontAwesomeIcon icon={faPlus} /> Create New Category\n          </button>\n        </header>\n        {isLoading ? (\n          <div className=\"text-center mt-5\">\n            <Loading />\n          </div>\n        ) : categories.length > 0 ? (\n          <div className=\"container mt-5\">\n            <AdminTable\n              config={this.tableConfig}\n              triggerEditEvent={this.editCategory}\n              deleteRow={this.removeCategory}\n              tableBody={categories as any}\n            />\n          </div>\n        ) : (\n          <div className=\"text-center my-5\">\n            <p>No Categories yet</p>\n          </div>\n        )}\n\n        {Object.keys(categoryToBeEdited).length > 1 && (\n          <BestMemberForm\n            isModalOpened={Object.keys(categoryToBeEdited).length > 1}\n            itemToBeEdited={categoryToBeEdited}\n            onSubmit={this.editCategory}\n            isSubmitting={isSubmitting}\n            closeModal={() =>\n              this.setState({ categoryToBeEdited: {} as Category })\n            }\n          />\n        )}\n\n        <BestMemberForm\n          isModalOpened={isCreateModalOpened}\n          isSubmitting={isSubmitting}\n          onSubmit={this.createCategory}\n          closeModal={() => this.setState({ isCreateModalOpened: false })}\n        />\n\n        <SweetAlert\n          show={!!successAlert}\n          success\n          title={successAlert || \" \"}\n          timeout={2000}\n          onConfirm={() => this.setState({ successAlert: null })}\n        />\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes, delete it!\"\n          confirmBtnBsStyle=\"danger\"\n          title=\"Are you sure?\"\n          onConfirm={() => {\n            this.removeCategory(idOfItemToBeDeleted, true);\n            this.setState({ idOfItemToBeDeleted: \"\" });\n          }}\n          onCancel={() => this.setState({ idOfItemToBeDeleted: \"\" })}\n          focusCancelBtn\n          show={!!idOfItemToBeDeleted}\n        >\n          You will not be able to recover this item !\n        </SweetAlert>\n      </AdminLayout>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"react-responsive-modal/styles.css\";\nimport { Modal } from \"react-responsive-modal\";\nimport Multiselect from \"react-widgets/lib/Multiselect\";\nimport JoditEditor from \"jodit-react\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\n\nimport { Article } from \"configurations/interfaces/article.interface\";\nimport Loading from \"shared/loading\";\nimport FormInput from \"shared/Input\";\nimport ImageInput from \"shared/image-input\";\nimport CategoriesService from \"modules/categories/services/categories.service\";\nimport { isEmpty } from \"shared/services/validation.service\";\n\ninterface Prop {\n  isModalOpened: boolean;\n  onSubmit: (item: any, submit: boolean, id?: string) => Promise<void>;\n  closeModal: () => void;\n  itemToBeEdited?: any;\n  isSubmitting?: boolean;\n}\n\ninterface State {\n  article: Article;\n  isLoading: boolean;\n  isImageUploading: boolean;\n  categories: any[];\n  errorAlert: string;\n}\n\nexport default class ArticleForm extends Component<Prop, State> {\n  state = {\n    article: {\n      title: \"\",\n      body: \"\",\n      cover: \"\",\n      metaDescription: \"\",\n      categories: [] as string[],\n    },\n    categories: [] as any[],\n    errorAlert: \"\",\n    isLoading: false,\n    isImageUploading: false,\n  };\n\n  _categoriesService: CategoriesService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._categoriesService = new CategoriesService();\n  }\n\n  componentDidMount() {\n    let { itemToBeEdited } = this.props;\n\n    if (itemToBeEdited) {\n      itemToBeEdited.date = this.formatDate();\n      this.setState({ article: itemToBeEdited });\n    }\n\n    this._categoriesService.list().then((response) => {\n      this.setState({\n        categories: response,\n      });\n    });\n  }\n\n  setImageUpload = (status: boolean, imageUrl?: string) => {\n    this.setState({ isImageUploading: status });\n    if (imageUrl)\n      this.setState({\n        article: { ...this.state.article, cover: imageUrl } as any,\n      });\n  };\n\n  formatDate = () => {\n    let currentDateTime = new Date();\n    let formattedDate =\n      currentDateTime.getFullYear() +\n      \"-\" +\n      (currentDateTime.getMonth() + 1) +\n      \"-\" +\n      currentDateTime.getDate();\n\n    return formattedDate;\n  };\n\n  handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    let { name, value } = e.currentTarget;\n\n    this.setState({\n      article: {\n        ...this.state.article,\n        [name]: value,\n      } as any,\n    });\n  };\n\n  handleCreate = (name: string) => {\n    this._categoriesService\n      .create({ name })\n      .then((response) => {\n        this.setState({\n          article: {\n            ...this.state.article,\n            categories: [...this.state.article.categories, response],\n          },\n          categories: [...this.state.categories, response],\n        });\n      })\n      .catch((err) => {\n        this.setState({ errorAlert: err.response.data.msg });\n      });\n  };\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let { article } = this.state;\n\n    if (\n      isEmpty(article.title) ||\n      isEmpty(article.metaDescription) ||\n      isEmpty(article.body) ||\n      isEmpty(article.cover)\n    ) {\n      this.setState({\n        errorAlert: \"Please make sure to fill all the required fields !\",\n      });\n    } else {\n      this.props.onSubmit(article, true).then(() => {\n        this.resetObj(article);\n        this.setState({ article: article });\n      });\n    }\n  };\n\n  resetObj(obj: any) {\n    for (let prop in obj) {\n      obj[prop] = \"\";\n    }\n  }\n\n  render() {\n    const config = {\n      readonly: false,\n    };\n    let {\n      isModalOpened,\n      itemToBeEdited,\n      closeModal,\n      isSubmitting,\n    } = this.props;\n    let {\n      article,\n      isLoading,\n      isImageUploading,\n      categories,\n      errorAlert,\n    } = this.state;\n\n    return (\n      <Modal\n        open={isModalOpened}\n        onClose={() => closeModal()}\n        center\n        styles={{\n          modal: {\n            animation: `${\n              isModalOpened ? \"customEnterAnimation\" : \"customLeaveAnimation\"\n            } 500ms`,\n          },\n        }}\n      >\n        {isLoading ? (\n          <Loading />\n        ) : (\n          <>\n            <h3 className=\"mb-3\"> Article </h3>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"form-group col-md-6\">\n                  <FormInput\n                    type=\"text\"\n                    required={true}\n                    placeholder=\"blog title\"\n                    label=\"Title\"\n                    id=\"title\"\n                    name=\"title\"\n                    errorPosition=\"bottom\"\n                    value={article.title}\n                    onChange={this.handleChange}\n                  />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"category\">Categories</label>\n                  <Multiselect\n                    id=\"category\"\n                    data={categories}\n                    textField=\"name\"\n                    valueField=\"id\"\n                    value={article.categories}\n                    allowCreate=\"onFilter\"\n                    onCreate={(name) => this.handleCreate(name)}\n                    onChange={(value) =>\n                      this.setState({\n                        article: {\n                          ...article,\n                          categories: value,\n                        },\n                      })\n                    }\n                  />\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"form-group col-12\">\n                  <FormInput\n                    type=\"textarea\"\n                    required={true}\n                    label=\"Meta Description\"\n                    placeholder=\"A short description for SEO\"\n                    id=\"metaDescription\"\n                    name=\"metaDescription\"\n                    rows=\"3\"\n                    errorPosition=\"bottom\"\n                    value={article.metaDescription}\n                    onChange={this.handleChange}\n                  />\n                </div>\n                <div className=\"form-group col-12\">\n                  <label>\n                    {\" \"}\n                    Body of the article <span className=\"error\">*</span>{\" \"}\n                  </label>\n                  <JoditEditor\n                    value={article.body}\n                    config={config}\n                    onBlur={(newContent) => {\n                      this.setState({\n                        article: {\n                          ...article,\n                          body: newContent,\n                        },\n                      });\n                    }}\n                  />\n                </div>\n              </div>\n\n              <ImageInput\n                imgUrl={article.cover}\n                required={true}\n                setImageUpload={this.setImageUpload}\n              />\n\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting || isImageUploading}\n              >\n                {isImageUploading\n                  ? \"Uploading...\"\n                  : isSubmitting\n                  ? \"Loading ...\"\n                  : itemToBeEdited\n                  ? \"Save\"\n                  : \"Create\"}\n              </button>\n            </form>\n          </>\n        )}\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n      </Modal>\n    );\n  }\n}\n","import CrudService from \"configurations/crud.service\";\n\nexport default class BlogService extends CrudService {\n  constructor() {\n    super();\n    this.initialize(\"/blog\");\n  }\n}\n","import React, { Component } from \"react\";\n\nimport AdminLayout from \"shared/admin-layout\";\nimport AdminTable from \"shared/admin-table\";\nimport Loading from \"shared/loading\";\nimport ArticleForm from \"../form\";\n\nimport UserService from \"modules/users/services/user.service\";\nimport BlogService from \"modules/blog/services/blog.service\";\nimport { Article } from \"configurations/interfaces/article.interface\";\n\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\ninterface State {\n  articles: Article[];\n  articleToBeEdited?: Article | null;\n  successAlert: string;\n  errorAlert: string;\n  isLoading: boolean;\n  isCreateModalOpened: boolean;\n  isSubmitting: boolean;\n  idOfItemToBeDeleted: string;\n}\n\nexport default class ArticlesListPage extends Component<Prop, State> {\n  tableConfig = {\n    tableHeaders: [\"title\", \"createdAt\"],\n    className: \"table-striped\",\n    actions: [\"edit\", \"delete\"],\n  };\n\n  state = {\n    articles: [] as Article[],\n    successAlert: \"\",\n    errorAlert: \"\",\n    articleToBeEdited: {} as Article,\n    isLoading: false,\n    isCreateModalOpened: false,\n    isSubmitting: false,\n    idOfItemToBeDeleted: \"\",\n  };\n\n  public _blogService: BlogService;\n  public _userService: UserService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._blogService = new BlogService();\n    this._userService = new UserService();\n  }\n\n  async componentDidMount() {\n    if (!this._userService.isUserLoggedIn())\n      return this.props.history.push(\"/login\");\n    this.setState({ isLoading: true });\n    try {\n      let articles = await this._blogService.list();\n\n      this.setState({ articles, isLoading: false });\n    } catch {\n      this.setState({ errorAlert: \"Error retrieving items\", isLoading: false });\n    }\n  }\n\n  createArticle = (article: Article) => {\n    let { articles } = this.state;\n\n    this.setState({\n      isSubmitting: true,\n    });\n\n    return this._blogService\n      .create(article)\n      .then((response) => {\n        articles.unshift(response as never);\n\n        this.setState({\n          articles,\n          successAlert: \"Article added successfully\",\n          errorAlert: \"\",\n          isCreateModalOpened: false,\n          isSubmitting: false,\n        });\n      })\n      .catch((err) => {\n        this.setState({\n          errorAlert: \"An error occurred\",\n          successAlert: \"\",\n          isSubmitting: false,\n        });\n      });\n  };\n\n  editArticle = (\n    article: Article,\n    submit: boolean,\n    id = this.state.articleToBeEdited._id\n  ) => {\n    if (submit) {\n      this.setState({\n        isSubmitting: true,\n      });\n      return this._blogService\n        .update(id, article)\n        .then((response) => {\n          this.updateStateWithNewArticle(response);\n          this.setState({\n            isSubmitting: false,\n            successAlert: \"Article updated successfully\",\n            errorAlert: \"\",\n            articleToBeEdited: {} as Article,\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            errorAlert: err.response.data.msg,\n          });\n        });\n    } else {\n      this.setState({\n        isSubmitting: false,\n        articleToBeEdited: article,\n      });\n    }\n  };\n\n  updateStateWithNewArticle = (article: Article) => {\n    let { articles } = this.state;\n    let objectToUpdateIndex: number = articles.findIndex(\n      (item: Article) => item._id === article._id\n    );\n\n    articles.splice(objectToUpdateIndex, 1, article as never);\n\n    this.setState({ articles });\n  };\n\n  removeArticle = (id: string, submit?: boolean) => {\n    let { articles } = this.state;\n\n    if (submit) {\n      this._blogService.delete(id).then(() => {\n        this.setState({\n          articles: articles.filter(\n            (item: Article) => item._id !== id\n          ),\n        });\n      });\n    } else {\n      this.setState({\n        idOfItemToBeDeleted: id,\n      });\n    }\n  };\n\n  render() {\n    let {\n      articles,\n      successAlert,\n      errorAlert,\n      articleToBeEdited,\n      idOfItemToBeDeleted,\n      isLoading,\n      isCreateModalOpened,\n      isSubmitting,\n    } = this.state;\n\n    return (\n      <AdminLayout>\n        <header className=\"d-flex justify-content-between container mt-5\">\n          <h2> Articles </h2>\n          <button\n            className=\"btn btn-success\"\n            onClick={() => this.setState({ isCreateModalOpened: true })}\n          >\n            <FontAwesomeIcon icon={faPlus} /> Create New Article\n          </button>\n        </header>\n        {isLoading ? (\n          <div className=\"text-center mt-5\">\n            <Loading />\n          </div>\n        ) : articles.length > 0 ? (\n          <div className=\"container mt-5\">\n            <AdminTable\n              config={this.tableConfig}\n              triggerEditEvent={this.editArticle}\n              deleteRow={this.removeArticle}\n              tableBody={articles as any}\n            />\n          </div>\n        ) : (\n          <div className=\"text-center my-5\">\n            <p>No Articles yet</p>\n          </div>\n        )}\n\n        {Object.keys(articleToBeEdited).length > 1 && (\n          <ArticleForm\n            isModalOpened={Object.keys(articleToBeEdited).length > 1}\n            itemToBeEdited={articleToBeEdited}\n            onSubmit={this.editArticle}\n            isSubmitting={isSubmitting}\n            closeModal={() =>\n              this.setState({ articleToBeEdited: {} as Article })\n            }\n          />\n        )}\n\n        <ArticleForm\n          isModalOpened={isCreateModalOpened}\n          isSubmitting={isSubmitting}\n          onSubmit={this.createArticle}\n          closeModal={() => this.setState({ isCreateModalOpened: false })}\n        />\n\n        <SweetAlert\n          show={!!successAlert}\n          success\n          title={successAlert || \" \"}\n          timeout={2000}\n          onConfirm={() => this.setState({ successAlert: null })}\n        />\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes, delete it!\"\n          confirmBtnBsStyle=\"danger\"\n          title=\"Are you sure?\"\n          onConfirm={() => {\n            this.removeArticle(idOfItemToBeDeleted, true);\n            this.setState({ idOfItemToBeDeleted: \"\" });\n          }}\n          onCancel={() => this.setState({ idOfItemToBeDeleted: \"\" })}\n          focusCancelBtn\n          show={!!idOfItemToBeDeleted}\n        >\n          You will not be able to recover this item !\n        </SweetAlert>\n      </AdminLayout>\n    );\n  }\n}\n","import CrudService from \"configurations/crud.service\";\n\nexport default class EventService extends CrudService {\n  constructor() {\n    super();\n    this.initialize(\"/events\");\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"react-responsive-modal/styles.css\";\nimport { Modal } from \"react-responsive-modal\";\nimport JoditEditor from \"jodit-react\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport DateTimePicker from \"react-widgets/lib/DateTimePicker\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\n\nimport { Event } from \"configurations/interfaces/event.interface\";\n\nimport Loading from \"shared/loading\";\nimport FormInput from \"shared/Input\";\nimport EventService from \"modules/events/services/event.service\";\nimport ImageInput from \"shared/image-input\";\nimport { isEmpty } from \"shared/services/validation.service\";\n\nMoment.locale(\"en\");\nmomentLocalizer();\n\ninterface Prop {\n  isModalOpened: boolean;\n  onSubmit: (item: any, submit: boolean, id?: string) => Promise<void>;\n  closeModal: () => void;\n  itemToBeEdited?: any;\n  isSubmitting?: boolean;\n}\n\ninterface State {\n  event: Event;\n  isLoading: boolean;\n  isImageUploading: boolean;\n  errorAlert: string;\n}\n\nexport default class EventForm extends Component<Prop, State> {\n  state = {\n    event: {\n      title: \"\",\n      description: \"\",\n      startDate: null as any,\n      endDate: null as any,\n      location: \"\",\n      cover: \"\",\n      images: [] as string[],\n      status: \"\",\n      formLink: \"\",\n    },\n    errorAlert: \"\",\n    isLoading: false,\n    isImageUploading: false,\n  };\n\n  _eventService: EventService;\n\n  constructor(props: Prop) {\n    super(props);\n    this._eventService = new EventService();\n  }\n\n  componentDidMount() {\n    let { itemToBeEdited } = this.props;\n\n    if (itemToBeEdited) {\n      itemToBeEdited.date = this.formatDate();\n      this.setState({ event: itemToBeEdited });\n    }\n  }\n\n  setImageUpload = (status: boolean, imageUrl?: string) => {\n    this.setState({ isImageUploading: status });\n    if (imageUrl)\n      this.setState({\n        event: { ...this.state.event, cover: imageUrl } as any,\n      });\n  };\n\n  uploadGalleryImage = (status: boolean, imageUrl?: string) => {\n    this.setState({ isImageUploading: status });\n    if (imageUrl)\n      this.setState({\n        event: {\n          ...this.state.event,\n          images: [...this.state.event.images, imageUrl],\n        } as any,\n      });\n  };\n\n  formatDate = () => {\n    let currentDateTime = new Date();\n    let formattedDate =\n      currentDateTime.getFullYear() +\n      \"-\" +\n      (currentDateTime.getMonth() + 1) +\n      \"-\" +\n      currentDateTime.getDate();\n\n    return formattedDate;\n  };\n\n  handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    let { name, value } = e.currentTarget;\n\n    this.setState({\n      event: {\n        ...this.state.event,\n        [name]: value,\n      } as any,\n    });\n  };\n\n  handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let { event } = this.state;\n\n    if (\n      isEmpty(event.title) ||\n      isEmpty(event.description) ||\n      isEmpty(event.startDate) ||\n      isEmpty(event.endDate) ||\n      isEmpty(event.cover)\n    ) {\n      this.setState({\n        errorAlert: \"Please make sure to fill all the required fields !\",\n      });\n    } else {\n      this.props.onSubmit(event, true).then(() => {\n        this.resetObj(event);\n        this.setState({ event: event });\n      });\n    }\n  };\n\n  resetObj(obj: any) {\n    for (let prop in obj) {\n      obj[prop] = \"\";\n    }\n  }\n\n  convertDateStringIntoDateObject(dateString: string) {\n    return typeof dateString === \"string\"\n      ? new Date(Date.parse(dateString))\n      : dateString;\n  }\n\n  render() {\n    const config = {\n      readonly: false,\n    };\n    let {\n      isModalOpened,\n      itemToBeEdited,\n      closeModal,\n      isSubmitting,\n    } = this.props;\n    let { event, isLoading, isImageUploading, errorAlert } = this.state;\n\n    return (\n      <Modal\n        open={isModalOpened}\n        onClose={() => closeModal()}\n        center\n        styles={{\n          modal: {\n            animation: `${\n              isModalOpened ? \"customEnterAnimation\" : \"customLeaveAnimation\"\n            } 500ms`,\n          },\n        }}\n      >\n        {isLoading ? (\n          <Loading />\n        ) : (\n          <>\n            <h3 className=\"mb-3\"> Event </h3>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"form-group col-md-6\">\n                  <FormInput\n                    type=\"text\"\n                    required={true}\n                    placeholder=\"Event title\"\n                    label=\"Title\"\n                    id=\"title\"\n                    name=\"title\"\n                    errorPosition=\"bottom\"\n                    value={event.title}\n                    onChange={this.handleChange}\n                  />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <FormInput\n                    type=\"url\"\n                    className=\"form-control\"\n                    label=\"Form Link\"\n                    id=\"formLink\"\n                    name=\"formLink\"\n                    errorPosition=\"bottom\"\n                    value={event.formLink}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"form-group col-12\">\n                  <FormInput\n                    type=\"text\"\n                    className=\"form-control\"\n                    label=\"Location\"\n                    id=\"location\"\n                    name=\"location\"\n                    errorPosition=\"bottom\"\n                    value={event.location}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"form-group col-12\">\n                  <label>\n                    {\" \"}\n                    Event Description <span className=\"error\">*</span>{\" \"}\n                  </label>\n                  <JoditEditor\n                    value={event.description}\n                    config={config}\n                    onBlur={(newContent) => {\n                      this.setState({\n                        event: {\n                          ...event,\n                          description: newContent,\n                        },\n                      });\n                    }}\n                  />\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"col-md-6\">\n                  <label htmlFor=\"startDate\">\n                    Start Date <span className=\"error\">*</span>\n                  </label>\n                  <DateTimePicker\n                    value={\n                      this.convertDateStringIntoDateObject(\n                        event.startDate\n                      ) as Date\n                    }\n                    onChange={(value) => {\n                      this.setState({\n                        event: {\n                          ...event,\n                          startDate: value.toString(),\n                        },\n                      });\n                    }}\n                  />\n                </div>\n                <div className=\"col-md-6\">\n                  <label htmlFor=\"endDate\">\n                    End Date <span className=\"error\">*</span>\n                  </label>\n                  <DateTimePicker\n                    value={\n                      this.convertDateStringIntoDateObject(\n                        event.endDate\n                      ) as Date\n                    }\n                    min={\n                      this.convertDateStringIntoDateObject(\n                        event.startDate\n                      ) as Date\n                    }\n                    onChange={(value) => {\n                      let status = value < new Date() ? \"past\" : \"upcoming\";\n\n                      this.setState({\n                        event: {\n                          ...event,\n                          endDate: value.toString(),\n                          status,\n                        },\n                      });\n                    }}\n                  />\n                </div>\n              </div>\n\n              <div className=\"row my-4\">\n                <div className=\"col-md-12\">\n                  <ImageInput\n                    imgUrl={event.cover}\n                    name=\"cover\"\n                    required={true}\n                    id=\"cover\"\n                    label=\"Event Cover\"\n                    setImageUpload={this.setImageUpload}\n                  />\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <h4>Gallery</h4>\n                <div className=\"col-md-12\">\n                  {event.images.length > 0 ? (\n                    <>\n                      <section className=\"d-flex\">\n                        {event.images.map((image) => {\n                          return (\n                            <ImageInput\n                              key={image}\n                              imgUrl={image}\n                              setImageUpload={this.uploadGalleryImage}\n                            />\n                          );\n                        })}\n                      </section>\n                      <ImageInput\n                        id=\"galleryImage\"\n                        imgUrl={\"\"}\n                        setImageUpload={this.uploadGalleryImage}\n                      />\n                    </>\n                  ) : (\n                    <ImageInput\n                      id=\"galleryImage\"\n                      imgUrl={\"\"}\n                      setImageUpload={this.uploadGalleryImage}\n                    />\n                  )}\n                </div>\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={!!errorAlert || isSubmitting || isImageUploading}\n              >\n                {isImageUploading\n                  ? \"Uploading...\"\n                  : isSubmitting\n                  ? \"Loading ...\"\n                  : itemToBeEdited\n                  ? \"Save\"\n                  : \"Create\"}\n              </button>\n            </form>\n          </>\n        )}\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n      </Modal>\n    );\n  }\n}\n","import AdminHome from \"modules/admin-home-page\";\nimport LoginPage from \"modules/users/components/loginPage\";\nimport UsersListPage from \"modules/users/components/usersListPage\";\nimport CommitteesListPage from \"modules/committees/components/committeesListPage\";\nimport BestMembersListPage from \"modules/best-members/components/page\";\nimport MessagesListPage from \"modules/messages/components/messagesListPage\";\nimport SubscribersListPage from \"modules/subscribtion/components/subscribersListPage\";\nimport CategoriesListPage from \"modules/categories/components/page\";\nimport ArticlesListPage from \"modules/blog/components/page\";\nimport EventsListPage from \"modules/events/components/eventsListPage\";\n\nimport { RouteStructure } from \"configurations/interfaces/route.interface\";\n\nexport let adminRoutes: RouteStructure[] = [\n  {\n    path: \"/\",\n    label: \"Home\",\n    component: AdminHome,\n    adminOnly: true,\n  },\n  {\n    path: \"/login\",\n    component: LoginPage,\n  },\n  {\n    path: \"/blog\",\n    label: \"Blog\",\n    component: ArticlesListPage,\n  },\n  {\n    path: \"/categories\",\n    label: \"Blog Categories\",\n    component: CategoriesListPage,\n  },\n  {\n    path: \"/events\",\n    label: \"Events\",\n    component: EventsListPage,\n  },\n  {\n    path: \"/committees\",\n    label: \"Committees\",\n    component: CommitteesListPage,\n    adminOnly: true,\n  },\n  {\n    path: \"/users\",\n    label: \"Users\",\n    component: UsersListPage,\n    adminOnly: true,\n  },\n  {\n    path: \"/best-members\",\n    label: \"Best Members\",\n    component: BestMembersListPage,\n    adminOnly: true,\n  },\n  {\n    path: \"/subscribers\",\n    label: \"Subscribers\",\n    component: SubscribersListPage,\n    adminOnly: true,\n  },\n  {\n    path: \"/messages\",\n    label: \"Inbox\",\n    component: MessagesListPage,\n    adminOnly: true,\n  },\n];\n","import React, { Component } from \"react\";\n\nimport AdminLayout from \"shared/admin-layout\";\nimport AdminTable from \"shared/admin-table\";\nimport Loading from \"shared/loading\";\nimport EventForm from \"../eventForm\";\n\nimport EventService from \"modules/events/services/event.service\";\nimport { Event } from \"configurations/interfaces/event.interface\";\n\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport UserService from \"modules/users/services/user.service\";\n\ninterface Prop {\n  history: {\n    push: (path: string) => void;\n  };\n}\n\ninterface State {\n  events: Event[];\n  eventToBeEdited?: Event | null;\n  successAlert: string;\n  errorAlert: string;\n  isLoading: boolean;\n  isCreateModalOpened: boolean;\n  isSubmitting: boolean;\n  idOfItemToBeDeleted: string;\n}\n\nexport default class EventsListPage extends Component<Prop, State> {\n  tableConfig = {\n    tableHeaders: [\n      \"title\",\n      \"status\"\n    ],\n    className: \"table-striped\",\n    actions: [\"edit\", \"delete\"],\n  };\n\n  state = {\n    events: [] as Event[],\n    successAlert: \"\",\n    errorAlert: \"\",\n    eventToBeEdited: {} as Event,\n    isLoading: false,\n    isCreateModalOpened: false,\n    isSubmitting: false,\n    idOfItemToBeDeleted: \"\",\n  };\n\n  public _eventService: EventService;\n  public _userService: UserService;\n  constructor(props: Prop) {\n    super(props);\n    this._eventService = new EventService();\n    this._userService = new UserService();\n  }\n\n  async componentDidMount() {\n    if (!this._userService.isUserLoggedIn())\n      return this.props.history.push(\"/login\");\n\n    this.setState({ isLoading: true });\n    try {\n      let events = await this._eventService.list();\n\n      this.setState({ events, isLoading: false });\n    } catch {\n      this.setState({ errorAlert: \"Error retrieving items\", isLoading: false });\n    }\n  }\n\n  createEvent = (event: Event) => {\n    let { events } = this.state;\n\n    this.setState({\n      isSubmitting: true,\n    });\n\n    return this._eventService\n      .create(event)\n      .then((response) => {\n        events.unshift(response as never);\n\n        this.setState({\n          events,\n          successAlert: \"Event added successfully\",\n          errorAlert: \"\",\n          isCreateModalOpened: false,\n          isSubmitting: false,\n        });\n      })\n      .catch((err) => {\n        this.setState({\n          errorAlert: err.response.data.msg,\n          successAlert: \"\",\n          isSubmitting: false,\n        });\n      });\n  };\n\n  editEvent = (\n    event: Event,\n    submit: boolean,\n    id = this.state.eventToBeEdited._id\n  ) => {\n    if (submit) {\n      this.setState({\n        isSubmitting: true,\n      });\n      return this._eventService\n        .update(id, event)\n        .then((response) => {\n          this.updateStateWithNewEvent(response);\n          this.setState({\n            isSubmitting: false,\n            successAlert: \"Event updated successfully\",\n            errorAlert: \"\",\n            eventToBeEdited: {} as Event,\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            errorAlert: err.response.data.msg,\n          });\n        });\n    } else {\n      this.setState({\n        isSubmitting: false,\n        eventToBeEdited: event,\n      });\n    }\n  };\n\n  updateStateWithNewEvent = (event: Event) => {\n    let { events } = this.state;\n    let objectToUpdateIndex: number = events.findIndex(\n      (item: Event) => item._id === event._id\n    );\n\n    events.splice(objectToUpdateIndex, 1, Event as never);\n\n    this.setState({ events });\n  };\n\n  removeEvent = (id: string, submit?: boolean) => {\n    let { events } = this.state;\n\n    if (submit) {\n      this._eventService.delete(id).then(() => {\n        this.setState({\n          events: events.filter((item: Event) => item._id !== id),\n        });\n      });\n    } else {\n      this.setState({\n        idOfItemToBeDeleted: id,\n      });\n    }\n  };\n\n  render() {\n    let {\n      events,\n      successAlert,\n      errorAlert,\n      eventToBeEdited,\n      idOfItemToBeDeleted,\n      isLoading,\n      isCreateModalOpened,\n      isSubmitting,\n    } = this.state;\n\n    return (\n      <AdminLayout>\n        <header className=\"d-flex justify-content-between container mt-5\">\n          <h2> Events </h2>\n          <button\n            className=\"btn btn-success\"\n            onClick={() => this.setState({ isCreateModalOpened: true })}\n          >\n            <FontAwesomeIcon icon={faPlus} /> Create New Event\n          </button>\n        </header>\n        {isLoading ? (\n          <div className=\"text-center mt-5\">\n            <Loading />\n          </div>\n        ) : events.length > 0 ? (\n          <div className=\"container mt-5\">\n            <AdminTable\n              config={this.tableConfig}\n              triggerEditEvent={this.editEvent}\n              deleteRow={this.removeEvent}\n              tableBody={events as any}\n            />\n          </div>\n        ) : (\n          <div className=\"text-center my-5\">\n            <p>No Events yet</p>\n          </div>\n        )}\n\n        {Object.keys(eventToBeEdited).length > 1 && (\n          <EventForm\n            isModalOpened={Object.keys(eventToBeEdited).length > 1}\n            itemToBeEdited={eventToBeEdited}\n            onSubmit={this.editEvent}\n            isSubmitting={isSubmitting}\n            closeModal={() => this.setState({ eventToBeEdited: {} as Event })}\n          />\n        )}\n\n        <EventForm\n          isModalOpened={isCreateModalOpened}\n          isSubmitting={isSubmitting}\n          onSubmit={this.createEvent}\n          closeModal={() => this.setState({ isCreateModalOpened: false })}\n        />\n\n        <SweetAlert\n          show={!!successAlert}\n          success\n          title={successAlert || \" \"}\n          timeout={2000}\n          onConfirm={() => this.setState({ successAlert: null })}\n        />\n\n        <SweetAlert\n          show={!!errorAlert}\n          warning\n          title=\"An error occurred\"\n          timeout={2000}\n          onConfirm={() => this.setState({ errorAlert: null })}\n        >\n          {errorAlert}\n        </SweetAlert>\n\n        <SweetAlert\n          warning\n          showCancel\n          confirmBtnText=\"Yes, delete it!\"\n          confirmBtnBsStyle=\"danger\"\n          title=\"Are you sure?\"\n          onConfirm={() => {\n            this.removeEvent(idOfItemToBeDeleted, true);\n            this.setState({ idOfItemToBeDeleted: \"\" });\n          }}\n          onCancel={() => this.setState({ idOfItemToBeDeleted: \"\" })}\n          focusCancelBtn\n          show={!!idOfItemToBeDeleted}\n        >\n          You will not be able to recover this item !\n        </SweetAlert>\n      </AdminLayout>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteProps,\n} from \"react-router-dom\";\n\nimport { adminRoutes } from \"configurations/admin-routes\";\nimport { RouteStructure } from \"configurations/interfaces/route.interface\";\n\nimport \"./App.css\";\n\nexport default class App extends Component<RouteProps> {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          {adminRoutes.map((adRoute: RouteStructure, index: number) => {\n            return (\n              <Route\n                key={`adRoute${index}`}\n                exact\n                path={adRoute.path}\n                component={adRoute.component as any}\n              />\n            );\n          })}\n        </Switch>\n      </Router>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"./App.css\";\n// import \"declarations\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}